<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Manatee.Json</name>
    </assembly>
    <members>
        <member name="T:Manatee.Json.ArrayEquality">
            <summary>
            Defines different kinds of array equality.
            </summary>
        </member>
        <member name="F:Manatee.Json.ArrayEquality.SequenceEqual">
            <summary>
            Defines that all elements in both arrays must match and be in the same sequence.
            </summary>
        </member>
        <member name="F:Manatee.Json.ArrayEquality.ContentsEqual">
            <summary>
            Defines that all elements in both arrays much match, but may appear in any sequence.
            </summary>
        </member>
        <member name="T:Manatee.Json.DuplicateKeyBehavior">
            <summary>
            Defines behavior of <see cref="T:Manatee.Json.JsonObject"/> when adding items at already exist.
            </summary>
        </member>
        <member name="F:Manatee.Json.DuplicateKeyBehavior.Throw">
            <summary>
            Throw an exception.
            </summary>
        </member>
        <member name="F:Manatee.Json.DuplicateKeyBehavior.Overwrite">
            <summary>
            Overwrite the existing item.
            </summary>
        </member>
        <member name="T:Manatee.Json.Internal.Uri3986">
            <summary>
            Defines a URI per RFC-3986.
            </summary>
        </member>
        <member name="M:Manatee.Json.Internal.Uri3986.IsValid(System.String)">
            <summary>
            Determines whether a string represents a valid URI.
            </summary>
            <param name="source">The URI string.</param>
            <returns>true if valid; otherwise false.</returns>
        </member>
        <member name="T:Manatee.Json.JsonArray">
            <summary>
            Represents a collection of JSON values.
            </summary>
            <remarks>
            A value can consist of a string, a numeric value, a boolean (true or false), a null placeholder,
            a JSON array of values, or a nested JSON object.
            </remarks>
        </member>
        <member name="P:Manatee.Json.JsonArray.EqualityStandard">
            <summary>
            Defines how this <see cref="T:Manatee.Json.JsonArray"/> evaluates equality.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonArray.#ctor">
            <summary>
            Creates an empty instance of a JSON array.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonArray.#ctor(System.Collections.Generic.IEnumerable{Manatee.Json.JsonValue})">
            <summary>
            Creates an instance of a JSON array and initializes it with the
            supplied JSON values.
            </summary>
            <param name="collection">A collection of <see cref="T:Manatee.Json.JsonValue"/>s.</param>
        </member>
        <member name="M:Manatee.Json.JsonArray.GetIndentedString(System.Int32)">
            <summary>
            Creates a string representation of the JSON data.
            </summary>
            <param name="indentLevel">The indention level for the array.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Manatee.Json.JsonArray.Add(Manatee.Json.JsonValue)">
            <summary>
            Adds an object to the end of the <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="item">The object to be added to the end of the <see cref="T:Manatee.Json.JsonArray"/>. If the value is null, it will be replaced by <see cref="F:Manatee.Json.JsonValue.Null"/>.</param>
        </member>
        <member name="M:Manatee.Json.JsonArray.AddRange(System.Collections.Generic.IEnumerable{Manatee.Json.JsonValue})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:Manatee.Json.JsonArray"/>. The collection itself cannot be null, but it can contain elements that are null.  These elements will be replaced by <see cref="F:Manatee.Json.JsonValue.Null"/></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:Manatee.Json.JsonArray.ToString">
            <summary>
            Creates a string representation of the JSON data.
            </summary>
            <returns>A string.</returns>
            <remarks>
            Passing the returned string back into the parser will result in a copy of this Json array.
            </remarks>
        </member>
        <member name="M:Manatee.Json.JsonArray.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
        </member>
        <member name="M:Manatee.Json.JsonArray.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Manatee.Json.JsonArrayExtensions">
            <summary>
            Provides extension methods for <see cref="T:Manatee.Json.JsonArray"/>s.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonArrayExtensions.OfType(Manatee.Json.JsonArray,Manatee.Json.JsonValueType)">
            <summary>
            Returns a <see cref="T:Manatee.Json.JsonArray"/> containing only the <see cref="T:Manatee.Json.JsonValue"/>s of a specified type from a given <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="arr">The array to search</param>
            <param name="type">The type of value to return</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing only the <see cref="T:Manatee.Json.JsonValue"/>s of a specified type</returns>
        </member>
        <member name="T:Manatee.Json.JsonObject">
            <summary>
            Represents a collection of key:value pairs in a JSON structure.
            </summary>
            <remarks>
            A key is always represented as a string.  A value can consist of a string, a numerical value, a boolean (true or false), a null placeholder, a JSON array of values, or a nested JSON object.
            </remarks>
        </member>
        <member name="P:Manatee.Json.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>The value associated with the specified key.</returns>
        </member>
        <member name="M:Manatee.Json.JsonObject.#ctor">
            <summary>
            Creates an empty instance of a JSON object.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonObject.#ctor(System.Collections.Generic.IDictionary{System.String,Manatee.Json.JsonValue})">
            <summary>
            Creates an instance of a JSON object and initializes it with the
            supplied JSON values.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:Manatee.Json.JsonObject.GetIndentedString(System.Int32)">
            <summary>
            Creates a string representation of the JSON data.
            </summary>
            <param name="indentLevel">The indention level for the object.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Manatee.Json.JsonObject.Add(System.String,Manatee.Json.JsonValue)">
            <summary>
            Adds the specified key and value to the dictionary.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. If the value is null, it will be replaced by <see cref="F:Manatee.Json.JsonValue.Null"/>.</param>
        </member>
        <member name="M:Manatee.Json.JsonObject.ToString">
            <summary>
            Creates a string representation of the JSON data.
            </summary>
            <returns>A string.</returns>
            <remarks>
            Passing the returned string back into the parser will result in a copy of this JSON object.
            </remarks>
        </member>
        <member name="M:Manatee.Json.JsonObject.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Manatee.Json.JsonObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Manatee.Json.JsonObjectExtensions">
            <summary>
            Provides extension methods for <see cref="T:Manatee.Json.JsonValue"/>s.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonObjectExtensions.TryGetString(Manatee.Json.JsonObject,System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> or null if the key is not found or is not a <see cref="T:System.String"/>.
            </summary>
            <param name="obj">The <see cref="T:Manatee.Json.JsonObject"/> to search</param>
            <param name="key">The key</param>
            <returns>A <see cref="T:System.String"/> or null if the key is not found or is not a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:Manatee.Json.JsonObjectExtensions.TryGetNumber(Manatee.Json.JsonObject,System.String)">
            <summary>
            Returns a <see cref="T:System.Nullable`1"/> or null if the key is not found or is not a double.
            </summary>
            <param name="obj">The <see cref="T:Manatee.Json.JsonObject"/> to search</param>
            <param name="key">The key</param>
            <returns>A <see cref="T:System.Nullable`1"/> or null if the key is not found or is not a <see cref="T:System.Nullable`1"/></returns>
        </member>
        <member name="M:Manatee.Json.JsonObjectExtensions.TryGetBoolean(Manatee.Json.JsonObject,System.String)">
            <summary>
            Returns a <see cref="T:System.Nullable`1"/> or null if the key is not found or is not a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="obj">The <see cref="T:Manatee.Json.JsonObject"/> to search</param>
            <param name="key">The key</param>
            <returns>A <see cref="T:System.Nullable`1"/> or null if the key is not found or is not a <see cref="T:System.Nullable`1"/></returns>
        </member>
        <member name="M:Manatee.Json.JsonObjectExtensions.TryGetArray(Manatee.Json.JsonObject,System.String)">
            <summary>
            Returns a <see cref="T:Manatee.Json.JsonArray"/> or null if the key is not found or is not a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="obj">The <see cref="T:Manatee.Json.JsonObject"/> to search</param>
            <param name="key">The key</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> or null if the key is not found or is not a <see cref="T:Manatee.Json.JsonArray"/></returns>
        </member>
        <member name="M:Manatee.Json.JsonObjectExtensions.TryGetObject(Manatee.Json.JsonObject,System.String)">
            <summary>
            Returns a <see cref="T:Manatee.Json.JsonObject"/> or null if the key is not found or is not a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="obj">The <see cref="T:Manatee.Json.JsonObject"/> to search</param>
            <param name="key">The key</param>
            <returns>A <see cref="T:Manatee.Json.JsonObject"/> or null if the key is not found or is not a <see cref="T:Manatee.Json.JsonObject"/></returns>
        </member>
        <member name="T:Manatee.Json.JsonOptions">
            <summary>
            Provides some configurability around the basic JSON entities.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonOptions.PrettyPrintIndent">
            <summary>
            Determines the indention string to use when calling <see cref="M:Manatee.Json.JsonValue.GetIndentedString(System.Int32)"/>.
            The default is a single tab.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonOptions.DuplicateKeyBehavior">
            <summary>
            Defines the how duplicate keys are handled for <see cref="T:Manatee.Json.JsonObject"/>s.
            The default is <see cref="F:Manatee.Json.DuplicateKeyBehavior.Throw"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonOptions.DefaultArrayEquality">
            <summary>
            Defines a default value for <see cref="P:Manatee.Json.JsonArray.EqualityStandard"/>.
            The default is <see cref="F:Manatee.Json.ArrayEquality.SequenceEqual"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonOptions.ThrowOnIncorrectTypeAccess">
            <summary>
            Defines whether <see cref="T:Manatee.Json.JsonValue"/> should throw an exception when being accessed by the
            wrong accessory type (e.g. accessing an array as a boolean).  The default is true.
            </summary>
        </member>
        <member name="T:Manatee.Json.JsonSyntaxException">
            <summary>
            Thrown when an input string contains a syntax error while parsing a <see cref="T:Manatee.Json.JsonObject"/>, <see cref="T:Manatee.Json.JsonArray"/>, or <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonSyntaxException.Location">
            <summary>
            Gets a JSON Pointer to the location at which the error was found.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonSyntaxException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
        </member>
        <member name="T:Manatee.Json.JsonValue">
            <summary>
            Represents a JSON value.
            </summary>
            <remarks>
            A value can consist of a string, a numerical value, a boolean (true or false), a null
            placeholder, a JSON array of values, or a nested JSON object.
            </remarks>
        </member>
        <member name="F:Manatee.Json.JsonValue.Null">
            <summary>
            Globally defined null-valued JSON value.
            </summary>
            <remarks>
            When adding values to a <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>, nulls will automatically be converted into this field.
            </remarks>
        </member>
        <member name="P:Manatee.Json.JsonValue.Boolean">
            <summary>
            Accesses the <see cref="T:Manatee.Json.JsonValue"/> as a boolean.
            </summary>
            <exception cref="T:Manatee.Json.JsonValueIncorrectTypeException">
            Thrown when this <see cref="T:Manatee.Json.JsonValue"/> does not contain a boolean.
            </exception>
        </member>
        <member name="P:Manatee.Json.JsonValue.String">
            <summary>
            Accesses the <see cref="T:Manatee.Json.JsonValue"/> as a string.
            </summary>
            <exception cref="T:Manatee.Json.JsonValueIncorrectTypeException">
            Thrown when this <see cref="T:Manatee.Json.JsonValue"/> does not contain a string.
            </exception>
            <remarks>
            Setting the value as a string will automatically change the <see cref="T:Manatee.Json.JsonValue"/>'s type and discard the old data.
            </remarks>
        </member>
        <member name="P:Manatee.Json.JsonValue.Number">
            <summary>
            Accesses the <see cref="T:Manatee.Json.JsonValue"/> as a numeric value.
            </summary>
            <exception cref="T:Manatee.Json.JsonValueIncorrectTypeException">
            Thrown when this <see cref="T:Manatee.Json.JsonValue"/> does not contain a numeric value.
            </exception>
        </member>
        <member name="P:Manatee.Json.JsonValue.Object">
            <summary>
            Accesses the <see cref="T:Manatee.Json.JsonValue"/> as a JSON object.
            </summary>
            <exception cref="T:Manatee.Json.JsonValueIncorrectTypeException">
            Thrown when this <see cref="T:Manatee.Json.JsonValue"/> does not contain a Json object.
            </exception>
        </member>
        <member name="P:Manatee.Json.JsonValue.Array">
            <summary>
            Accesses the <see cref="T:Manatee.Json.JsonValue"/> as a JSON array.
            </summary>
            <exception cref="T:Manatee.Json.JsonValueIncorrectTypeException">
            Thrown when this <see cref="T:Manatee.Json.JsonValue"/> does not contain a Json array.
            </exception>
        </member>
        <member name="P:Manatee.Json.JsonValue.Type">
            <summary>
            Gets the value type of the existing data.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor">
            <summary>
            Creates a null <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Creates a <see cref="T:Manatee.Json.JsonValue"/> from a boolean.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Manatee.Json.JsonValue"/> from a string.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(System.Nullable{System.Double})">
            <summary>
            Creates a <see cref="T:Manatee.Json.JsonValue"/> from a numeric value.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(Manatee.Json.JsonObject)">
            <summary>
            Creates a <see cref="T:Manatee.Json.JsonValue"/> from a JSON object.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(Manatee.Json.JsonArray)">
            <summary>
            Creates a <see cref="T:Manatee.Json.JsonValue"/> from a JSON array.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.#ctor(Manatee.Json.JsonValue)">
            <summary>
            Creates a copy of a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValue.GetIndentedString(System.Int32)">
            <summary>
            Creates a string representation of the JSON data.
            </summary>
            <param name="indentLevel">The indention level for the value.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:Manatee.Json.JsonValue.ToString">
            <summary>
            Creates a string that represents this <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <returns>A string representation of this <see cref="T:Manatee.Json.JsonValue"/>.</returns>
            <remarks>
            Passing the returned string back into the parser will result in a copy of this <see cref="T:Manatee.Json.JsonValue"/>.
            </remarks>
        </member>
        <member name="M:Manatee.Json.JsonValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param>
        </member>
        <member name="M:Manatee.Json.JsonValue.Equals(Manatee.Json.JsonValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.JsonValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Manatee.Json.JsonValue.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> containing a JSON value.
            </summary>
            <param name="source">the <see cref="T:System.String"/> to parse.</param>
            <returns>The JSON value represented by the <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="source"/> is empty or whitespace.</exception>
            <exception cref="T:Manatee.Json.JsonSyntaxException">Thrown if <paramref name="source"/> contains invalid JSON syntax.</exception>
        </member>
        <member name="M:Manatee.Json.JsonValue.Parse(System.IO.TextReader)">
            <summary>
            Parses data from a <see cref="T:System.IO.StreamReader"/> containing a JSON value.
            </summary>
            <param name="stream">the <see cref="T:System.IO.StreamReader"/> to parse.</param>
            <returns>The JSON value represented by the <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream"/> is at the end.</exception>
            <exception cref="T:Manatee.Json.JsonSyntaxException">Thrown if <paramref name="stream"/> contains invalid JSON syntax.</exception>
        </member>
        <member name="M:Manatee.Json.JsonValue.ParseAsync(System.IO.TextReader)">
            <summary>
            Parses data from a <see cref="T:System.IO.StreamReader"/> containing a JSON value.
            </summary>
            <param name="stream">the <see cref="T:System.IO.StreamReader"/> to parse.</param>
            <returns>The JSON value represented by the <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="stream"/> is at the end.</exception>
            <exception cref="T:Manatee.Json.JsonSyntaxException">Thrown if <paramref name="stream"/> contains invalid JSON syntax.</exception>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Implicit(System.Nullable{System.Boolean})~Manatee.Json.JsonValue">
            <summary>
            Implicitly converts a <see cref="T:System.Boolean"/> into a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="b">A <see cref="T:System.Boolean"/>.</param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the <see cref="T:System.Boolean"/>.</returns>
            <remarks>
            This is useful when creating an initialized <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>.
            </remarks>
            <example><code>
            JsonObject obj = new JsonObject{
            	{"stringData", "string"},
            	{"numberData", 10.6},
            	{"boolData", true},
            	{"arrayData", new JsonArray{false, "Array String", JsonValue.Null, 8e-4}},
            	{"objectData", new JsonObject{
            		{"stringData2", "another string"},
            		{"moreBoolData", false}}}};
            </code></example>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Implicit(System.String)~Manatee.Json.JsonValue">
            <summary>
            Implicitly converts a <see cref="T:System.String"/> into a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="s">A <see cref="T:System.String"/>.</param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the <see cref="T:System.String"/>.</returns>
            <remarks>
            This is useful when creating an initialized <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>.
            </remarks>
            <example><code>
            JsonObject obj = new JsonObject{
            	{"stringData", "string"},
            	{"numberData", 10.6},
            	{"boolData", true},
            	{"arrayData", new JsonArray{false, "Array String", JsonValue.Null, 8e-4}},
            	{"objectData", new JsonObject{
            		{"stringData2", "another string"},
            		{"moreBoolData", false}}}};
            </code></example>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Implicit(System.Nullable{System.Double})~Manatee.Json.JsonValue">
            <summary>
            Implicitly converts a <see cref="T:System.Double"/> into a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="n">A <see cref="T:System.Double"/>.</param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the <see cref="T:System.Double"/>.</returns>
            <remarks>
            This is useful when creating an initialized <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>.
            </remarks>
            <example><code>
            JsonObject obj = new JsonObject{
            	{"stringData", "string"},
            	{"numberData", 10.6},
            	{"boolData", true},
            	{"arrayData", new JsonArray{false, "Array String", JsonValue.Null, 8e-4}},
            	{"objectData", new JsonObject{
            		{"stringData2", "another string"},
            		{"moreBoolData", false}}}};
            </code></example>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Implicit(Manatee.Json.JsonObject)~Manatee.Json.JsonValue">
            <summary>
            Implicitly converts a <see cref="T:Manatee.Json.JsonObject"/> into a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="o">A JSON object.</param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the <see cref="T:Manatee.Json.JsonObject"/>.</returns>
            <remarks>
            This is useful when creating an initialized <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>.
            </remarks>
            <example><code>
            JsonObject obj = new JsonObject{
            	{"stringData", "string"},
            	{"numberData", 10.6},
            	{"boolData", true},
            	{"arrayData", new JsonArray{false, "Array String", JsonValue.Null, 8e-4}},
            	{"objectData", new JsonObject{
            		{"stringData2", "another string"},
            		{"moreBoolData", false}}}};
            </code></example>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Implicit(Manatee.Json.JsonArray)~Manatee.Json.JsonValue">
            <summary>
            Implicitly converts a <see cref="T:Manatee.Json.JsonArray"/> into a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="a">A JSON array.</param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the <see cref="T:Manatee.Json.JsonArray"/>.</returns>
            <remarks>
            This is useful when creating an initialized <see cref="T:Manatee.Json.JsonObject"/> or <see cref="T:Manatee.Json.JsonArray"/>.
            </remarks>
            <example><code>
            JsonObject obj = new JsonObject{
            	{"stringData", "string"},
            	{"numberData", 10.6},
            	{"boolData", true},
            	{"arrayData", new JsonArray{false, "Array String", JsonValue.Null, 8e-4}},
            	{"objectData", new JsonObject{
            		{"stringData2", "another string"},
            		{"moreBoolData", false}}}};
            </code></example>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Equality(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
             Performs an equality comparison between two <see cref="T:Manatee.Json.JsonValue"/>s.
            </summary>
            <param name="a">A JsonValue.</param>
            <param name="b">A JsonValue.</param>
            <returns>true if the values are equal; otherwise, false.</returns>
        </member>
        <member name="M:Manatee.Json.JsonValue.op_Inequality(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
             Performs an inverted equality comparison between two <see cref="T:Manatee.Json.JsonValue"/>s.
            </summary>
            <param name="a">A JsonValue.</param>
            <param name="b">A JsonValue.</param>
            <returns>false if the values are equal; otherwise, true.</returns>
        </member>
        <member name="T:Manatee.Json.JsonValueIncorrectTypeException">
            <summary>
            Thrown when a value is accessed via the incorrect type accessor.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonValueIncorrectTypeException.ValidType">
            <summary>
            The correct type for the <see cref="T:Manatee.Json.JsonValue"/> that threw the exception.
            </summary>
        </member>
        <member name="P:Manatee.Json.JsonValueIncorrectTypeException.RequestedType">
            <summary>
            The type requested.
            </summary>
        </member>
        <member name="M:Manatee.Json.JsonValueIncorrectTypeException.#ctor(Manatee.Json.JsonValueType,Manatee.Json.JsonValueType)">
            <summary>
            Creates a new instance of this exception.
            </summary>
        </member>
        <member name="T:Manatee.Json.JsonValueType">
            <summary>
            Specifies various types of values for use in a JSON key:value pair.
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.Number">
            <summary>
            Indicates that the Json key:value pair contains a numeric value (double).
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.String">
            <summary>
            Indicates that the Json key:value pair contains a string.
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.Boolean">
            <summary>
            Indicates that the Json key:value pair contains a boolean value.
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.Object">
            <summary>
            Indicates that the Json key:value pair contains a nested Json object.
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.Array">
            <summary>
            Indicates that the Json key:value pair contains a Json array.
            </summary>
        </member>
        <member name="F:Manatee.Json.JsonValueType.Null">
            <summary>
            Indicates that the Json key:value pair contains a null value.
            </summary>
        </member>
        <member name="T:Manatee.Json.LinqExtensions">
            <summary>
            These extension methods cover LINQ compatibility.
            </summary>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{Manatee.Json.JsonValue})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> returned from a LINQ query back into a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="results">An <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>An equivalent <see cref="T:Manatee.Json.JsonArray"/></returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IDictionary{System.String,Manatee.Json.JsonValue})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IDictionary`2"/> into a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="results">An <see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <returns>An equivalent <see cref="T:Manatee.Json.JsonObject"/></returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,Manatee.Json.JsonValue}})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> returned from a LINQ query back into a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="results">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
            <returns>An equivalent <see cref="T:Manatee.Json.JsonObject"/></returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts a collection of strings to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of strings</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the strings</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Converts a collection of bools to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of booleans</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the booleans</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Nullable{System.Boolean}})">
            <summary>
            Converts a collection of <see cref="T:System.Nullable`1"/> to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of <see cref="T:System.Nullable`1"/></param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the <see cref="T:System.Nullable`1"/></returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{Manatee.Json.JsonArray})">
            <summary>
            Converts a collection of <see cref="T:Manatee.Json.JsonArray"/>s to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of <see cref="T:Manatee.Json.JsonArray"/>s</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the <see cref="T:Manatee.Json.JsonArray"/>s</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{Manatee.Json.JsonObject})">
            <summary>
            Converts a collection of <see cref="T:Manatee.Json.JsonObject"/>s to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of <see cref="T:Manatee.Json.JsonObject"/>s</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the <see cref="T:Manatee.Json.JsonObject"/>s</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Converts a collection of doubles to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of doubles</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the doubles</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Converts a collection of doubles to a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="list">A collection of doubles</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the doubles</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson``1(System.Collections.Generic.IEnumerable{``0},Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Serializes a collection of objects which implement <see cref="T:Manatee.Json.Serialization.IJsonSerializable"/> to a <see cref="T:Manatee.Json.JsonArray"/> of equivalent JsonValues.
            </summary>
            <param name="list">A collection of equivalent <see cref="T:Manatee.Json.JsonValue"/>s</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>A <see cref="T:Manatee.Json.JsonArray"/> containing the equivalent JsonValues</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.ToJson``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,``0}},Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> returned from a LINQ query back into a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="results">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/></param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>An equivalent <see cref="T:Manatee.Json.JsonObject"/></returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.FromJson``1(System.Collections.Generic.IEnumerable{Manatee.Json.JsonValue},Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Deserializes a collection of <see cref="T:Manatee.Json.JsonValue"/>s to an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of the objects.
            </summary>
            <typeparam name="T">The type of object contained in the collection</typeparam>
            <param name="json">The collection of <see cref="T:Manatee.Json.JsonValue"/>s</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>A collection of the deserialized objects</returns>
        </member>
        <member name="M:Manatee.Json.LinqExtensions.FromJson``1(Manatee.Json.JsonObject,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Deserializes a <see cref="T:Manatee.Json.JsonValue"/> to its equivalent object.
            </summary>
            <typeparam name="T">The type of object</typeparam>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> to deserialize</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional serialization of values.</param>
            <returns>A collection of the deserialized objects</returns>
        </member>
        <member name="M:Manatee.Json.Parsing.StringParser._MustInterpretComplex(System.Char)">
            <summary>
            Indicates whether or not the lookahead character is a 
            complex escape code.
            </summary>
            <param name="lookAhead">Lookahead character.</param>
            <returns><c>true</c> if and only if <paramref name="lookAhead"/>
            would require complex interpretation.</returns>
        </member>
        <member name="T:Manatee.Json.Patch.JsonPatch">
            <summary>
            Models JSON Patch documents.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatch.Schema">
            <summary>
            Provides a schema that can be used to validate JSON Patch documents before deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Patch.JsonPatch.TryApply(Manatee.Json.JsonValue)">
            <summary>
            Attempts to apply the patch to a JSON instance.
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:Manatee.Json.Patch.JsonPatchAction">
            <summary>
            Defines an action that can be applied within a JSON Patch document.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchAction.Operation">
            <summary>
            Gets or sets the operation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchAction.Path">
            <summary>
            Gets or sets the path.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchAction.From">
            <summary>
            Gets or sets the source for a value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchAction.Value">
            <summary>
            Gets or sets a discrete value to be used.
            </summary>
        </member>
        <member name="T:Manatee.Json.Patch.JsonPatchOperation">
            <summary>
            Defines available operations for JSON Patch actions.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Add">
            <summary>
            Indicates an addition operation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Remove">
            <summary>
            Indicates a removal operation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Replace">
            <summary>
            Indicates a replacement operation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Move">
            <summary>
            Indicates a movement operation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Copy">
            <summary>
            Indicates a copy operation.
            </summary>
        </member>
        <member name="F:Manatee.Json.Patch.JsonPatchOperation.Test">
            <summary>
            Indicates a test operation.
            </summary>
        </member>
        <member name="T:Manatee.Json.Patch.JsonPatchResult">
            <summary>
            Provides the results of a JSON Patch application.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchResult.Patched">
            <summary>
            The resulting document, if the patch was successful.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchResult.Success">
            <summary>
            Gets whether the patch was successful.
            </summary>
        </member>
        <member name="P:Manatee.Json.Patch.JsonPatchResult.Error">
            <summary>
            Gets any errors that have occurred during a patch.
            </summary>
        </member>
        <member name="T:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext">
            <summary>
            Provides context for the Shunting-yard Algorithm implementation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext.Output">
            <summary>
            Output expression stack.
            </summary>
        </member>
        <member name="P:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext.Operators">
            <summary>
            Operator expression stack.
            </summary>
        </member>
        <member name="P:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext.LastExpression">
            <summary>
            The last encountered expression.
            </summary>
            <remarks>
            Used to differentiate unary negation from subtraction.
            </remarks>
        </member>
        <member name="M:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext._VisitNegate``1(Manatee.Json.Path.Expressions.ExpressionTreeNode{``0})">
            <summary>
            Constant terms are negated immediately.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.Expressions.Parsing.JsonPathExpressionContext._CheckAndReplaceIfHasPropertyNeeded``1(Manatee.Json.Path.Expressions.Parsing.JsonPathOperator,Manatee.Json.Path.Expressions.ExpressionTreeNode{``0}@,Manatee.Json.Path.Expressions.ExpressionTreeNode{``0}@)">
            <summary>
            Converts <paramref name="left"/> and <paramref name="right"/> to <see cref="T:Manatee.Json.Path.Expressions.HasPropertyExpression`1"/>
            nodes if either are <see cref="T:Manatee.Json.Path.Expressions.NameExpression`1"/> nodes being used in boolean contexts. Otherwise,
            it leaves the nodes as-is.
            </summary>
            <typeparam name="TIn">Type of the resulting JSON expression.</typeparam>
            <param name="op">Operator applied to <paramref name="left"/> and <paramref name="right"/>.</param>
            <param name="left">Left hand side of <paramref name="op"/>.</param>
            <param name="right">Right hand side of <paramref name="op"/>.</param>
        </member>
        <member name="T:Manatee.Json.Path.JsonPath">
            <summary>
            Provides primary functionality for JSON Path objects.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.Parse(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> containing a JSON path.
            </summary>
            <param name="source">the <see cref="T:System.String"/> to parse.</param>
            <returns>The JSON path represented by the <see cref="T:System.String"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="source"/> is empty or whitespace.</exception>
            <exception cref="T:Manatee.Json.Path.JsonPathSyntaxException">Thrown if <paramref name="source"/> contains invalid JSON path syntax.</exception>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.Evaluate(Manatee.Json.JsonValue)">
            <summary>
            Evaluates a JSON value using the path.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> to evaulate.</param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.Equals(Manatee.Json.Path.JsonPath)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
            <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Path.JsonPath.GetHashCode">
            <summary>Serves as a hash function for a particular type. </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Manatee.Json.Path.JsonPathArray">
            <summary>
            Serves as a stand-in for JsonArray in Path Expressions.
            </summary>
        </member>
        <member name="T:Manatee.Json.Path.JsonPathRoot">
            <summary>
            Provides extension methods which can be used within array and search JSON Path queries.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathRoot.Length">
            <summary>
            Specifies the length of a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathRoot.HasProperty(System.String)">
            <summary>
            Determines if an object contains a property or, if its value is a boolean, whether the value is true.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>true if the value is an object and contains key <paramref name="name"/> or if its value is true; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathRoot.Name(System.String)">
            <summary>
            Determines if an object contains a property containing a number and retrieves its value.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The value if the property exists and is a number; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathRoot.ArrayIndex(System.Int32)">
            <summary>
            Determines if an object contains a property containing a number and retrieves its value.
            </summary>
            <param name="index">The index to retreive.</param>
            <returns>The value if the property exists and is a number; otherwise null.</returns>
        </member>
        <member name="T:Manatee.Json.Path.JsonPathSyntaxException">
            <summary>
            Thrown when an input string contains a syntax error while parsing a <see cref="T:Manatee.Json.Path.JsonPath"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.Path.JsonPathSyntaxException.Path">
            <summary>
            Gets the path up to the point at which the error was found.
            </summary>
        </member>
        <member name="P:Manatee.Json.Path.JsonPathSyntaxException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <returns>
            The error message that explains the reason for the exception, or an empty string("").
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Manatee.Json.Path.JsonPathValue">
            <summary>
            Serves as a stand-in for JsonValue in Path Expressions.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(Manatee.Json.Path.JsonPathValue,System.Boolean)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Equality(System.Boolean,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(Manatee.Json.Path.JsonPathValue,System.Boolean)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Inequality(System.Boolean,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThan(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThan(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThan(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThan(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThan(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThanOrEqual(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThanOrEqual(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThanOrEqual(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThanOrEqual(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LessThanOrEqual(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThan(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThan(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThan(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThan(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThan(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThanOrEqual(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThanOrEqual(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThanOrEqual(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThanOrEqual(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_GreaterThanOrEqual(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_LogicalNot(Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Addition(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Addition(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Addition(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Addition(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Addition(System.String,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Subtraction(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Subtraction(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Subtraction(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Multiply(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Multiply(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Multiply(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Division(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Division(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Division(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Modulus(Manatee.Json.Path.JsonPathValue,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Modulus(Manatee.Json.Path.JsonPathValue,System.Double)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathValue.op_Modulus(System.Double,Manatee.Json.Path.JsonPathValue)">
            <summary>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Manatee.Json.Path.JsonPathWith">
            <summary>
            Provides methods to be used when working with JSON Paths.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Length">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Path.JsonPath"/> object which starts by specifying an array length.
            </summary>
            <returns>A new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Name(System.String)">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Path.JsonPath"/> object which starts by specifying an object property.
            </summary>
            <param name="name">The name to follow.</param>
            <returns>A new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
            <remarks>If <paramref name="name"/> is "length", operates as <see cref="M:Manatee.Json.Path.JsonPathWith.Length"/></remarks>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Search(System.String)">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Path.JsonPath"/> object which starts by searching for an object property.
            </summary>
            <param name="name">The name to search for.</param>
            <returns>A new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
            <remarks>If <paramref name="name"/> is "length", operates as <see cref="M:Manatee.Json.Path.JsonPathWith.SearchLength"/></remarks>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchLength">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Path.JsonPath"/> object which starts by searching for array lengths.
            </summary>
            <returns>A new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(Manatee.Json.Path.Slice[])">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a series of array indicies.
            </summary>
            <param name="slices">The indices and slices of the <see cref="T:Manatee.Json.JsonValue"/>s to include.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathArray,System.Int32}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an expression which evaluates to the index to include.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathValue,System.Boolean}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a predicate expression which filters the values.
            </summary>
            <param name="expression">The predicate expression</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(Manatee.Json.Path.Slice[])">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a series of array indicies.
            </summary>
            <param name="slices">The indices and slices of the <see cref="T:Manatee.Json.JsonValue"/>s to include.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathArray,System.Int32}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an expression which evaluates to the index to include.
            </summary>
            <param name="expression">The expression.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathValue,System.Boolean}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a predicate expression which filters the values.
            </summary>
            <param name="expression">The predicate expression</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Length(Manatee.Json.Path.JsonPath)">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an array length.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Name(Manatee.Json.Path.JsonPath,System.String)">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an object property.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="name">The name to follow.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
            <remarks>If <paramref name="name"/> is "length", operates as <see cref="M:Manatee.Json.Path.JsonPathWith.Length(Manatee.Json.Path.JsonPath)"/></remarks>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Search(Manatee.Json.Path.JsonPath,System.String)">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by searching for an object property.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="name">The name to follow.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
            <remarks>If <paramref name="name"/> is "length", operates as <see cref="M:Manatee.Json.Path.JsonPathWith.SearchLength(Manatee.Json.Path.JsonPath)"/></remarks>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchLength(Manatee.Json.Path.JsonPath)">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by searching for array lengths.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(Manatee.Json.Path.JsonPath,Manatee.Json.Path.Slice[])">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a series of array indicies.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="slices">The indices and slices of the <see cref="T:Manatee.Json.JsonValue"/>s to include.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(Manatee.Json.Path.JsonPath,System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathArray,System.Int32}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an expression which evaluates to the index to include.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="expression">The expression.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.SearchArray(Manatee.Json.Path.JsonPath,System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathValue,System.Boolean}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a predicate expression which filters the values.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="expression">The predicate expression</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(Manatee.Json.Path.JsonPath)">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by including all array values.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(Manatee.Json.Path.JsonPath,Manatee.Json.Path.Slice[])">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a series of array indicies.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="slices">The indices of the <see cref="T:Manatee.Json.JsonValue"/>s to include.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(Manatee.Json.Path.JsonPath,System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathArray,System.Int32}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying an expression which evaluates to the index to include.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="expression">The expression.</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="M:Manatee.Json.Path.JsonPathWith.Array(Manatee.Json.Path.JsonPath,System.Linq.Expressions.Expression{System.Func{Manatee.Json.Path.JsonPathValue,System.Boolean}})">
            <summary>
            Appends a <see cref="T:Manatee.Json.Path.JsonPath"/> by specifying a predicate expression which filters the values.
            </summary>
            <param name="path">The <see cref="T:Manatee.Json.Path.JsonPath"/> to extend.</param>
            <param name="expression">The predicate expression</param>
            <returns>The new <see cref="T:Manatee.Json.Path.JsonPath"/>.</returns>
        </member>
        <member name="T:Manatee.Json.Path.PathExpressionExtensions">
            <summary>
            Provides extension methods which can be used within array and search JSON Path queries.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.Length(Manatee.Json.Path.JsonPathArray)">
            <summary>
            Specifies the length of a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="json">The array.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.Name(Manatee.Json.Path.JsonPathArray,System.String)">
            <summary>
            Specifies the length of a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="json">The array.</param>
            <param name="name">The name of the property.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.Length(Manatee.Json.Path.JsonPathValue)">
            <summary>
            Specifies the length of a <see cref="T:Manatee.Json.JsonArray"/>.
            </summary>
            <param name="json">The array.</param>
            <returns>The length of the array.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.HasProperty(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            Determines if an object contains a property or, if its value is a boolean, whether the value is true.
            </summary>
            <param name="json">The value.</param>
            <param name="name">The name of the property.</param>
            <returns>true if the value is an object and contains key <paramref name="name"/> or if its value is true; otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.Name(Manatee.Json.Path.JsonPathValue,System.String)">
            <summary>
            Determines if an object contains a property containing a number and retrieves its value.
            </summary>
            <param name="json">The value.</param>
            <param name="name">The name of the property.</param>
            <returns>The value if the property exists and is a number; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.ArrayIndex(Manatee.Json.Path.JsonPathValue,System.Int32)">
            <summary>
            Determines if an object contains a property containing a number and retrieves its value.
            </summary>
            <param name="json">The value.</param>
            <param name="index">The index to retreive.</param>
            <returns>The value if the property exists and is a number; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Path.PathExpressionExtensions.IndexOf(Manatee.Json.Path.JsonPathValue,Manatee.Json.JsonValue)">
            <summary>
            Gets the index of a value within an array.
            </summary>
            <param name="json">The value.</param>
            <param name="value">The query.</param>
            <returns>The index of the requested value or -1 if the value does not exist.</returns>
        </member>
        <member name="T:Manatee.Json.Path.Slice">
            <summary>
            Defines an index in a JSON Path array.
            </summary>
        </member>
        <member name="M:Manatee.Json.Path.Slice.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Path.Slice"/> class.
            </summary>
            <param name="index">A single index.</param>
        </member>
        <member name="M:Manatee.Json.Path.Slice.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Path.Slice"/> class.
            </summary>
            <param name="start">The start index of the slice.</param>
            <param name="end">The end index of the slice.</param>
            <param name="step">Optional. The increment between each selected index between <paramref name="start"/> and <paramref name="end"/>.</param>
        </member>
        <member name="M:Manatee.Json.Path.Slice.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Path.Slice.Equals(Manatee.Json.Path.Slice)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Path.Slice.Equals(System.Object)">
            <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
            <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Path.Slice.GetHashCode">
            <summary>Serves as a hash function for a particular type. </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Path.Slice.op_Implicit(System.Int32)~Manatee.Json.Path.Slice">
            <summary>
            Implicit conversion from integer to a single-indexed <see cref="T:Manatee.Json.Path.Slice"/>.
            </summary>
            <param name="i">The index.</param>
        </member>
        <member name="T:Manatee.Json.Pointer.JsonPointer">
            <summary>
            Represents a JSON Pointer.
            </summary>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.#ctor">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Pointer.JsonPointer"/> instance.
            </summary>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.#ctor(System.String[])">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Pointer.JsonPointer"/> instance.
            </summary>
            <param name="source">A collection of strings representing the segments of the pointer.</param>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Pointer.JsonPointer"/> instance.
            </summary>
            <param name="source">A collection of strings representing the segments of the pointer.</param>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.Parse(System.String)">
            <summary>
            Parses a string containing a JSON Pointer.
            </summary>
            <param name="source">The source string.</param>
            <returns>A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> instance.</returns>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.Evaluate(Manatee.Json.JsonValue)">
            <summary>
            Evaluates the pointer against a JSON instance.
            </summary>
            <param name="root">The JSON instance.</param>
            <returns>The element the pointer references, if any.</returns>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.Clone">
            <summary>
            Creates a copy of the pointer.
            </summary>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.CloneAndAppend(System.String[])">
            <summary>
            Creates a copy of the pointer and appends new segments.
            </summary>
            <param name="append">The segments to append.</param>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.Equals(Manatee.Json.Pointer.JsonPointer)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Pointer.JsonPointer.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Pointer.PointerEvaluationResults">
            <summary>
            Provides results for a JSON Pointer evaluation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Pointer.PointerEvaluationResults.Result">
            <summary>
            Gets the referenced value, if found.
            </summary>
        </member>
        <member name="P:Manatee.Json.Pointer.PointerEvaluationResults.Error">
            <summary>
            Gets any errors that may have resulted in not finding the referenced value.
            </summary>
        </member>
        <member name="T:Manatee.Json.ReadOnlyException">
            <summary>
            Thrown when a read-only property is accessed.
            </summary>
        </member>
        <member name="M:Manatee.Json.ReadOnlyException.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.ReadOnlyException"/> class.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.FluentBuilderExtensions">
            <summary>
            Extends <see cref="T:Manatee.Json.Schema.JsonSchema"/> to aid in construction.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.AdditionalItems(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add an <code>additionalItems</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.AdditionalProperties(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add an <code>additionalProperties</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.AllOf(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema[])">
            <summary>
            Add an <code>allOf</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.AnyOf(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema[])">
            <summary>
            Add an <code>anyOf</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Comment(Manatee.Json.Schema.JsonSchema,System.String)">
            <summary>
            Add a <code>$comment</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Const(Manatee.Json.Schema.JsonSchema,Manatee.Json.JsonValue)">
            <summary>
            Add a <code>const</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Contains(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add a <code>contains</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.ContentEncoding(Manatee.Json.Schema.JsonSchema,System.String)">
            <summary>
            Add a <code>contentEncoding</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.ContentMediaType(Manatee.Json.Schema.JsonSchema,System.String)">
            <summary>
            Add a <code>contentMediaType</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Default(Manatee.Json.Schema.JsonSchema,Manatee.Json.JsonValue)">
            <summary>
            Add a <code>default</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Definition(Manatee.Json.Schema.JsonSchema,System.String,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add a single definition to the <code>definitions</code> keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Dependency(Manatee.Json.Schema.JsonSchema,System.String,System.String[])">
            <summary>
            Add a property-based dependency to the <code>dependencies</code> keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Dependency(Manatee.Json.Schema.JsonSchema,System.String,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add a schema-based dependency to the <code>dependencies</code> keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Description(Manatee.Json.Schema.JsonSchema,System.String)">
            <summary>
            Add a <code>descriptions</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Else(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add an <code>else</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Enum(Manatee.Json.Schema.JsonSchema,Manatee.Json.JsonValue[])">
            <summary>
            Add an <code>enum</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Examples(Manatee.Json.Schema.JsonSchema,Manatee.Json.JsonValue[])">
            <summary>
            Add an <code>examples</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.ExclusiveMaximum(Manatee.Json.Schema.JsonSchema,System.Double)">
            <summary>
            Add an <code>exclusiveMaximum</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.ExclusiveMaximumDraft04(Manatee.Json.Schema.JsonSchema,System.Boolean)">
            <summary>
            Add an <code>exclusiveMaximum</code> keyword for draft-04 to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.ExclusiveMinimum(Manatee.Json.Schema.JsonSchema,System.Double)">
            <summary>
            Add an <code>exclusiveMinimum</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.ExclusiveMinimumDraft04(Manatee.Json.Schema.JsonSchema,System.Boolean)">
            <summary>
            Add an <code>exclusiveMinimum</code> keyword for draft-04 to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Format(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.StringFormat)">
            <summary>
            Add a <code>format</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Id(Manatee.Json.Schema.JsonSchema,System.String)">
            <summary>
            Add an <code>$id</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.IdDraft04(Manatee.Json.Schema.JsonSchema,System.String)">
            <summary>
            Add an <code>id</code> keyword for draft-04 to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.If(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add an <code>if</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Items(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema[])">
            <summary>
            Add an <code>items</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Maximum(Manatee.Json.Schema.JsonSchema,System.Double)">
            <summary>
            Add a <code>maximum</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.MaxItems(Manatee.Json.Schema.JsonSchema,System.UInt32)">
            <summary>
            Add a <code>maxItems</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.MaxLength(Manatee.Json.Schema.JsonSchema,System.UInt32)">
            <summary>
            Add a <code>maxLength</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.MaxProperties(Manatee.Json.Schema.JsonSchema,System.UInt32)">
            <summary>
            Add a <code>maxProperties</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Minimum(Manatee.Json.Schema.JsonSchema,System.Double)">
            <summary>
            Add a <code>minimum</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.MinItems(Manatee.Json.Schema.JsonSchema,System.UInt32)">
            <summary>
            Add a <code>minItems</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.MinLength(Manatee.Json.Schema.JsonSchema,System.UInt32)">
            <summary>
            Add a <code>minLength</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.MinProperties(Manatee.Json.Schema.JsonSchema,System.UInt32)">
            <summary>
            Add a <code>minProperties</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.MultipleOf(Manatee.Json.Schema.JsonSchema,System.Double)">
            <summary>
            Add a <code>multipleOf</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Not(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add a <code>not</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.OneOf(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema[])">
            <summary>
            Add a <code>oneOf</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Pattern(Manatee.Json.Schema.JsonSchema,System.String)">
            <summary>
            Add a <code>pattern</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Pattern(Manatee.Json.Schema.JsonSchema,System.Text.RegularExpressions.Regex)">
            <summary>
            Add a <code>pattern</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.PatternProperty(Manatee.Json.Schema.JsonSchema,System.String,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add a single pattern-based property requirement to the <code>patterProperties</code> keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Property(Manatee.Json.Schema.JsonSchema,System.String,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add a single property requirement to the <code>properties</code> keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.PropertyNames(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add a <code>propertyNames</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.ReadOnly(Manatee.Json.Schema.JsonSchema,System.Boolean)">
            <summary>
            Add a <code>readOnly</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Ref(Manatee.Json.Schema.JsonSchema,System.String)">
            <summary>
            Add a <code>$ref</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.RefRoot(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add a <code>$ref</code> keyword that points to the root (<code>#</code>) to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Required(Manatee.Json.Schema.JsonSchema,System.String[])">
            <summary>
            Add a <code>required</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Schema(Manatee.Json.Schema.JsonSchema,System.String)">
            <summary>
            Add a <code>$schema</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Then(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Add a <code>then</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Title(Manatee.Json.Schema.JsonSchema,System.String)">
            <summary>
            Add a <code>title</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.Type(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchemaType)">
            <summary>
            Add a <code>type</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.UniqueItems(Manatee.Json.Schema.JsonSchema,System.Boolean)">
            <summary>
            Add a <code>uniqueItems</code> keyword to the schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FluentBuilderExtensions.WriteOnly(Manatee.Json.Schema.JsonSchema,System.Boolean)">
            <summary>
            Add a <code>writeOnly</code> keyword to the schema.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.GetterExtensions">
            <summary>
            Extends <see cref="T:Manatee.Json.Schema.JsonSchema"/> to aid in fetching properties.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.AdditionalItems(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>additionalItems</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.AdditionalProperties(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>additionalProperties</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.AllOf(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>allOf</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.AnyOf(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>anyOf</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Comment(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>$comment</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Const(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>const</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Contains(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>contains</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.ContentEncoding(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>contentEncoding</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.ContentMediaType(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>contentMediaType</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Default(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>default</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Definitions(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>definitions</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Description(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>description</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Else(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>else</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Enum(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>enum</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Examples(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>examples</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.ExclusiveMaximum(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>exclusiveMaximum</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.ExclusiveMaximumDraft04(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>exclusiveMaximum</code> keyword for draft-04, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.ExclusiveMinimum(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>exclusiveMinimum</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.ExclusiveMinimumDraft04(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>exclusiveMinimum</code> keyword for draft-04, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Format(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>format</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Id(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>$id</code> (or <code>id</code> for draft-04) keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Items(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>items</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Maximum(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>maximum</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.MaxItems(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>maxItems</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.MaxLength(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>maxLength</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.MaxProperties(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>maxProperties</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Minimum(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>minimum</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.MinItems(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>minItems</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.MinLength(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>minLength</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.MinProperties(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>minProperties</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.MultipleOf(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>multipleOf</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Not(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>not</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.OneOf(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>oneOf</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Pattern(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>pattern</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.PatternProperties(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>patternProperties</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Properties(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>properties</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.PropertyNames(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>propertyNames</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.ReadOnly(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>readOnly</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Ref(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>$ref</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.RefResolved(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the resolved schema for the <code>$ref</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Required(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>required</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Schema(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>$schema</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Then(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>then</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Title(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>title</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.UniqueItems(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>uniqueItems</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.WriteOnly(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the value for the <code>writeOnly</code> keyword, if present.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.GetterExtensions.Get``1(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Gets the indicated keyword, if present.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.IJsonSchemaDependency">
            <summary>
            Defines properties and methods required to represent dependencies within JSON Schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IJsonSchemaDependency.PropertyName">
            <summary>
            Gets or sets the property with the dependency.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IJsonSchemaDependency.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchemaDependency.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this dependency.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchemaDependency.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
            <implementationNotes>
            If the dependency does not contain any schemas (e.g. <code>maximum</code>), this method is a no-op.
            </implementationNotes>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchemaDependency.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
            <implementationNotes>
            If the dependency contains no subschemas, simply return null.
            If the dependency contains a subschema, simply pass the call to <see cref="M:Manatee.Json.Schema.JsonSchema.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)"/>.
            </implementationNotes>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchema">
            <summary>
            Encapsulates and models JSON Schema.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema.Empty">
            <summary>
            Defines the empty schema.  Analogous to <see cref="F:Manatee.Json.Schema.JsonSchema.True"/>.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema.True">
            <summary>
            Defines the True schema.  Validates all JSON instances.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchema.False">
            <summary>
            Defines the False schema.  Validates no JSON instances.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema.DocumentPath">
            <summary>
            Defines the document path.  If not explicitly provided, it will be derived from the <see cref="P:Manatee.Json.Schema.JsonSchema.Id"/> property.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema.Id">
            <summary>
            Gets the <code>$id</code> (or <code>id</code> for draft-04) property value, if declared.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema.Schema">
            <summary>
            Gets the <code>$schema</code> property, if declared.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchema.OtherData">
            <summary>
            Gets other data that may be present in the schema but unrelated to any known keywords.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.#ctor(System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.JsonSchema"/> class, explicitly set to a true/false value.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.ValidateSchema">
            <summary>
            Validates that the schema object represents a valid schema in accordance with a known meta-schema.
            </summary>
            <returns>Validation results.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.Validate(Manatee.Json.JsonValue)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="json">The instance to validate.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.op_Implicit(System.Boolean)~Manatee.Json.Schema.JsonSchema">
            <summary>
            Implicitly converts a boolean into a boolean schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.Equals(Manatee.Json.Schema.JsonSchema)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.op_Equality(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Overloads the equals operator for <see cref="T:Manatee.Json.Schema.JsonSchema"/>.
            </summary>
            <returns>true if the two values represent the same schema; false otherwise</returns>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchema.op_Inequality(Manatee.Json.Schema.JsonSchema,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Overloads the not-equal operator for <see cref="T:Manatee.Json.Schema.JsonSchema"/>.
            </summary>
            <returns>false if the two values represent the same schema; true otherwise</returns>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaOptions">
            <summary>
            Defines options associated with JSON Schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaOptions.Download">
            <summary>
            Gets and sets a method used to download online schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaOptions.ValidateFormatKeyword">
            <summary>
            Gets or sets whether the "format" schema keyword should be validated.  The default is true.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.JsonSchemaOptions.OutputFormat">
            <summary>
            Gets or sets the output verbosity.  The default is <see cref="F:Manatee.Json.Schema.SchemaValidationOutputFormat.Hierarchy"/>.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaRegistry">
            <summary>
            Provides a registry in which JSON schema can be saved to be referenced by the system.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.#cctor">
            <summary>
            Initializes the <see cref="T:Manatee.Json.Schema.JsonSchemaRegistry"/> class.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.Get(System.String)">
            <summary>
            Downloads and registers a schema at the specified URI.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.Register(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Explicitly registers an existing schema.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.Unregister(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Removes a schema from the registry.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.Unregister(System.String)">
            <summary>
            Removes a schema from the registry.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.JsonSchemaRegistry.Clear">
            <summary>
            Clears the registry of all types.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaType">
            <summary>
            Defines the recognized schema data types.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.NotDefined">
            <summary>
            Provides a default value so that type cannot be assumed.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Array">
            <summary>
            Indicates the array type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Indicates the boolean type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Indicates the integer type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Null">
            <summary>
            Indicates the null type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Number">
            <summary>
            Indicates the number type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.Object">
            <summary>
            Indicates the object type.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaType.String">
            <summary>
            Indicates the string type.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.JsonSchemaVersion">
            <summary>
            Enumerates the official schema versions (drafts).
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaVersion.None">
            <summary>
            No adherence to any known schema draft.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaVersion.Draft04">
            <summary>
            Adheres to draft-04.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaVersion.Draft06">
            <summary>
            Adheres to draft-06.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaVersion.Draft07">
            <summary>
            Adheres to draft-07.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaVersion.Draft08">
            <summary>
            Adheres to draft-08.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.JsonSchemaVersion.All">
            <summary>
            Adheres to all known schema drafts.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.AdditionalItemsKeyword">
            <summary>
            Defines the <code>additionalItems</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AdditionalItemsKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AdditionalItemsKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AdditionalItemsKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AdditionalItemsKeyword.Value">
            <summary>
            The schema value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.#ctor(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.AdditionalItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.Equals(Manatee.Json.Schema.AdditionalItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.AdditionalPropertiesKeyword">
            <summary>
            Defines the <code>additionalProperties</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AdditionalPropertiesKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AdditionalPropertiesKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AdditionalPropertiesKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AdditionalPropertiesKeyword.Value">
            <summary>
            The schema value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.#ctor(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.AdditionalPropertiesKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.Equals(Manatee.Json.Schema.AdditionalPropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AdditionalPropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.AllOfKeyword">
            <summary>
            Defines the <code>allOf</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AllOfKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AllOfKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AllOfKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.AllOfKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AllOfKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.AllOfKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AllOfKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AllOfKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AllOfKeyword.Equals(Manatee.Json.Schema.AllOfKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AllOfKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AllOfKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.AllOfKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.AnyOfKeyword">
            <summary>
            Defines the <code>anyOf</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AnyOfKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AnyOfKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.AnyOfKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.AnyOfKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AnyOfKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.AnyOfKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AnyOfKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AnyOfKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.AnyOfKeyword.Equals(Manatee.Json.Schema.AnyOfKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AnyOfKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.AnyOfKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.AnyOfKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.CommentKeyword">
            <summary>
            Defines the <code>$comment</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.CommentKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.CommentKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.CommentKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.CommentKeyword.Value">
            <summary>
            The string value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.CommentKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.Equals(Manatee.Json.Schema.CommentKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.CommentKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ConstKeyword">
            <summary>
            Defines the <code>const</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ConstKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ConstKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ConstKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ConstKeyword.Value">
            <summary>
            The JSON value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.#ctor(Manatee.Json.JsonValue)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ConstKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.Equals(Manatee.Json.Schema.ConstKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ConstKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ContainsKeyword">
            <summary>
            Defines the <code>contains</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContainsKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContainsKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContainsKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
            <implementationNotes>
            May be duplicated across different keywords.  This property comes into play when there
            are several keywords which must be evaluated in a specific order.
            </implementationNotes>
        </member>
        <member name="P:Manatee.Json.Schema.ContainsKeyword.Value">
            <summary>
            The schema value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.#ctor(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.AdditionalItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.Equals(Manatee.Json.Schema.ContainsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ContainsKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ContentEncodingKeyword">
            <summary>
            Defines the <code>contentEncoding</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContentEncodingKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContentEncodingKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContentEncodingKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContentEncodingKeyword.Value">
            <summary>
            The content encoding type for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ContentEncodingKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.Equals(Manatee.Json.Schema.ContentEncodingKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ContentEncodingKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ContentMediaTypeKeyword">
            <summary>
            Defines the <code>contentMediaType</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContentMediaTypeKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContentMediaTypeKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContentMediaTypeKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ContentMediaTypeKeyword.Value">
            <summary>
            The string value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ContentMediaTypeKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.Equals(Manatee.Json.Schema.ContentMediaTypeKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ContentMediaTypeKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.DefaultKeyword">
            <summary>
            Defines the <code>default</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DefaultKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DefaultKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DefaultKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DefaultKeyword.Value">
            <summary>
            The JSON value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.#ctor(Manatee.Json.JsonValue)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.AdditionalItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.Equals(Manatee.Json.Schema.DefaultKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.DefaultKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.DefinitionsKeyword">
            <summary>
            Defines the <code>definitions</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DefinitionsKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DefinitionsKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DefinitionsKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.DefinitionsKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DefinitionsKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.DefinitionsKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DefinitionsKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DefinitionsKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DefinitionsKeyword.Equals(Manatee.Json.Schema.DefinitionsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DefinitionsKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DefinitionsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.DefinitionsKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.DependenciesKeyword">
            <summary>
            Defines the <code>dependencies</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DependenciesKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DependenciesKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DependenciesKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.DependenciesKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DependenciesKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.DependenciesKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DependenciesKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DependenciesKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DependenciesKeyword.Equals(Manatee.Json.Schema.DependenciesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DependenciesKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DependenciesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.DependenciesKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.DescriptionKeyword">
            <summary>
            Defines the <code>description</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DescriptionKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DescriptionKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DescriptionKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.DescriptionKeyword.Value">
            <summary>
            The string value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.DescriptionKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.Equals(Manatee.Json.Schema.DescriptionKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.DescriptionKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ElseKeyword">
            <summary>
            Defines the <code>else</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ElseKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ElseKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ElseKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ElseKeyword.Value">
            <summary>
            The schema value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.#ctor(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ElseKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.Equals(Manatee.Json.Schema.ElseKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ElseKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.EnumKeyword">
            <summary>
            Defines the <code>enum</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.EnumKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.EnumKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.EnumKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.#ctor(Manatee.Json.JsonValue[])">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.EnumKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.#ctor(System.Collections.Generic.IEnumerable{Manatee.Json.JsonValue})">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.EnumKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.Equals(Manatee.Json.Schema.EnumKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.EnumKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ExamplesKeyword">
            <summary>
            Defines the <code>examples</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExamplesKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExamplesKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExamplesKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.#ctor(Manatee.Json.JsonValue[])">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ExamplesKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.#ctor(System.Collections.Generic.IEnumerable{Manatee.Json.JsonValue})">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ExamplesKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.Equals(Manatee.Json.Schema.ExamplesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ExamplesKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword">
            <summary>
            Defines the <code>exclusiveMaximum</code> JSON Schema keyword for draft-04 schemas.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.Value">
            <summary>
            The boolean value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.Equals(Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumDraft04Keyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ExclusiveMaximumKeyword">
            <summary>
            Defines the <code>exclusiveMaximum</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMaximumKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMaximumKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMaximumKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMaximumKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.#ctor(System.Double)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ExclusiveMaximumKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.Equals(Manatee.Json.Schema.ExclusiveMaximumKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMaximumKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword">
            <summary>
            Defines the <code>exclusiveMinimum</code> JSON Schema keyword for draft-04 schemas.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.Value">
            <summary>
            The boolean value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.Equals(Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumDraft04Keyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ExclusiveMinimumKeyword">
            <summary>
            Defines the <code>exclusiveMinimum</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMinimumKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMinimumKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMinimumKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ExclusiveMinimumKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.#ctor(System.Double)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ExclusiveMinimumKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.Equals(Manatee.Json.Schema.ExclusiveMinimumKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ExclusiveMinimumKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.FormatKeyword">
            <summary>
            Defines the <code>format</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.FormatKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.FormatKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.FormatKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.FormatKeyword.Value">
            <summary>
            The string format for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.#ctor(Manatee.Json.Schema.StringFormat)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.FormatKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.Equals(Manatee.Json.Schema.FormatKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.FormatKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.IdKeyword">
            <summary>
            Defines the <code>$id</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IdKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IdKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IdKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IdKeyword.Value">
            <summary>
            The string value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.IdKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.Equals(Manatee.Json.Schema.IdKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.IdKeywordDraft04">
            <summary>
            Defines the <code>id</code> JSON Schema keyword for draft-04.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IdKeywordDraft04.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IdKeywordDraft04.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeywordDraft04.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeywordDraft04.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.IdKeywordDraft04"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeywordDraft04.Equals(Manatee.Json.Schema.IdKeywordDraft04)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeywordDraft04.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.IdKeywordDraft04.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.IfKeyword">
            <summary>
            Defines the <code>if</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IfKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IfKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IfKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IfKeyword.Value">
            <summary>
            The schema value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.#ctor(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.IfKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.Equals(Manatee.Json.Schema.IfKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.IfKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.IJsonSchemaKeyword">
            <summary>
            Defines a keyword for JSON Schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IJsonSchemaKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IJsonSchemaKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.IJsonSchemaKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
            <implementationNotes>
            May be duplicated across different keywords.  This property comes into play when there
            are several keywords which must be evaluated in a specific order.
            </implementationNotes>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchemaKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchemaKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
            <implementationNotes>
            If the keyword does not contain any schemas (e.g. <code>maximum</code>), this method is a no-op.
            </implementationNotes>
        </member>
        <member name="M:Manatee.Json.Schema.IJsonSchemaKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
            <implementationNotes>
            If the keyword contains no subschemas, simply return null.
            If the keyword contains a subschema, simply pass the call to <see cref="M:Manatee.Json.Schema.JsonSchema.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)"/>.
            </implementationNotes>
        </member>
        <member name="T:Manatee.Json.Schema.ItemsKeyword">
            <summary>
            Defines the <code>items</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ItemsKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ItemsKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ItemsKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ItemsKeyword.IsArray">
            <summary>
            Gets whether this keyword represents a single schema or an array of schemas.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ItemsKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ItemsKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ItemsKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ItemsKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ItemsKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ItemsKeyword.Equals(Manatee.Json.Schema.ItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ItemsKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.MaximumKeyword">
            <summary>
            Defines the <code>maximum</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaximumKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaximumKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaximumKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaximumKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.#ctor(System.Double)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.MaximumKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.Equals(Manatee.Json.Schema.MaximumKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.MaximumKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.MaxItemsKeyword">
            <summary>
            Defines the <code>maxItems</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxItemsKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxItemsKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxItemsKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxItemsKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.#ctor(System.UInt32)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.MaxItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.Equals(Manatee.Json.Schema.MaxItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.MaxLengthKeyword">
            <summary>
            Defines the <code>maxLength</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxLengthKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxLengthKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxLengthKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxLengthKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.#ctor(System.UInt32)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.MaxLengthKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.Equals(Manatee.Json.Schema.MaxLengthKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxLengthKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.MaxPropertiesKeyword">
            <summary>
            Defines the <code>maxProperties</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxPropertiesKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxPropertiesKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxPropertiesKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MaxPropertiesKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.#ctor(System.UInt32)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.MaxPropertiesKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.Equals(Manatee.Json.Schema.MaxPropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.MaxPropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.MinimumKeyword">
            <summary>
            Defines the <code>minimum</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinimumKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinimumKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinimumKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinimumKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.#ctor(System.Double)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.MinimumKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.Equals(Manatee.Json.Schema.MinimumKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.MinimumKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.MinItemsKeyword">
            <summary>
            Defines the <code>minItems</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinItemsKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinItemsKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinItemsKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinItemsKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.#ctor(System.UInt32)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.MinItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.Equals(Manatee.Json.Schema.MinItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.MinItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.MinLengthKeyword">
            <summary>
            Defines the <code>minLength</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinLengthKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinLengthKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinLengthKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinLengthKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.#ctor(System.UInt32)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.MinLengthKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.Equals(Manatee.Json.Schema.MinLengthKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.MinLengthKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.MinPropertiesKeyword">
            <summary>
            Defines the <code>minProperties</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinPropertiesKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinPropertiesKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinPropertiesKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MinPropertiesKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.#ctor(System.UInt32)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.MinPropertiesKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.Equals(Manatee.Json.Schema.MinPropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.MinPropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.MultipleOfKeyword">
            <summary>
            Defines the <code>multipleOf</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MultipleOfKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MultipleOfKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MultipleOfKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MultipleOfKeyword.Value">
            <summary>
            The numeric value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.#ctor(System.Double)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.MultipleOfKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.Equals(Manatee.Json.Schema.MultipleOfKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.MultipleOfKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.NotKeyword">
            <summary>
            Defines the <code>not</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.NotKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.NotKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.NotKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.NotKeyword.Value">
            <summary>
            The schema value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.#ctor(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.NotKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.Equals(Manatee.Json.Schema.NotKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.NotKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.OneOfKeyword">
            <summary>
            Defines the <code>oneOf</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.OneOfKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.OneOfKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.OneOfKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.OneOfKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.OneOfKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.OneOfKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.OneOfKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.OneOfKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.OneOfKeyword.Equals(Manatee.Json.Schema.OneOfKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.OneOfKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.OneOfKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.OneOfKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.PatternKeyword">
            <summary>
            Defines the <code>pattern</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PatternKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PatternKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PatternKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PatternKeyword.Value">
            <summary>
            The regular expression for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.#ctor(System.Text.RegularExpressions.Regex)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.PatternKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.PatternKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.Equals(Manatee.Json.Schema.PatternKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.PatternKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.PatternPropertiesKeyword">
            <summary>
            Defines the <code>patternProperties</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PatternPropertiesKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PatternPropertiesKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PatternPropertiesKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PatternPropertiesKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PatternPropertiesKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.PatternPropertiesKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PatternPropertiesKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PatternPropertiesKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PatternPropertiesKeyword.Equals(Manatee.Json.Schema.PatternPropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PatternPropertiesKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PatternPropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.PatternPropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.PropertiesKeyword">
            <summary>
            Defines the <code>properties</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PropertiesKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PropertiesKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PropertiesKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PropertiesKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PropertiesKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertiesKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PropertiesKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertiesKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PropertiesKeyword.Equals(Manatee.Json.Schema.PropertiesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertiesKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertiesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertiesKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.PropertyNamesKeyword">
            <summary>
            Defines the <code>propertyNames</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PropertyNamesKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PropertyNamesKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PropertyNamesKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PropertyNamesKeyword.Value">
            <summary>
            The schema value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.#ctor(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.PropertyNamesKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.Equals(Manatee.Json.Schema.PropertyNamesKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyNamesKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ReadOnlyKeyword">
            <summary>
            Defines the <code>readOnly</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ReadOnlyKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ReadOnlyKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ReadOnlyKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ReadOnlyKeyword.Value">
            <summary>
            The boolean value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ReadOnlyKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.Equals(Manatee.Json.Schema.ReadOnlyKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ReadOnlyKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.RefKeyword">
            <summary>
            Defines the <code>$ref</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.RefKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.RefKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.RefKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.RefKeyword.Reference">
            <summary>
            Gets the reference value for this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.RefKeyword.Resolved">
            <summary>
            Gets the resolved schema that corresponds to the reference.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.RefKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.Equals(Manatee.Json.Schema.RefKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.RefKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.RequiredKeyword">
            <summary>
            Defines the <code>required</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.RequiredKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.RequiredKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.RequiredKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.#ctor(System.String[])">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.RequiredKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.RequiredKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.Equals(Manatee.Json.Schema.RequiredKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.RequiredKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaKeyword">
            <summary>
            Defines the <code>$schema</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaKeyword.Value">
            <summary>
            The string value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.SchemaKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.Equals(Manatee.Json.Schema.SchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.ThenKeyword">
            <summary>
            Defines the <code>then</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ThenKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ThenKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ThenKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.ThenKeyword.Value">
            <summary>
            The schema value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.#ctor(Manatee.Json.Schema.JsonSchema)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.ThenKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.Equals(Manatee.Json.Schema.ThenKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.ThenKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.TitleKeyword">
            <summary>
            Defines the <code>title</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.TitleKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.TitleKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.TitleKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.TitleKeyword.Value">
            <summary>
            The string value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.#ctor(System.String)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.TitleKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.Equals(Manatee.Json.Schema.TitleKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.TitleKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.TypeKeyword">
            <summary>
            Defines the <code>type</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.TypeKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.TypeKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.TypeKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.TypeKeyword.Value">
            <summary>
            The schema value type for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.#ctor(Manatee.Json.Schema.JsonSchemaType)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.TypeKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.Equals(Manatee.Json.Schema.TypeKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.TypeKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.UniqueItemsKeyword">
            <summary>
            Defines the <code>uniqueItems</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.UniqueItemsKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.UniqueItemsKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.UniqueItemsKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.UniqueItemsKeyword.Value">
            <summary>
            The boolean value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.UniqueItemsKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.Equals(Manatee.Json.Schema.UniqueItemsKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.UniqueItemsKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.WriteOnlyKeyword">
            <summary>
            Defines the <code>writeOnly</code> JSON Schema keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.WriteOnlyKeyword.Name">
            <summary>
            Gets the name of the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.WriteOnlyKeyword.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.WriteOnlyKeyword.ValidationSequence">
            <summary>
            Gets the a value indicating the sequence in which this keyword will be evaluated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.WriteOnlyKeyword.Value">
            <summary>
            The boolean value for this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.#ctor">
            <summary>
            Used for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.#ctor(System.Boolean)">
            <summary>
            Creates an instance of the <see cref="T:Manatee.Json.Schema.WriteOnlyKeyword"/>.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this keyword.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.Equals(Manatee.Json.Schema.WriteOnlyKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.Equals(Manatee.Json.Schema.IJsonSchemaKeyword)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.WriteOnlyKeyword.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.MetaSchemas">
            <summary>
            Defines the official draft meta-schemas.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.MetaSchemas.Draft04">
            <summary>
            The meta-schema for draft-04.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.MetaSchemas.Draft06">
            <summary>
            The meta-schema for draft-046.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.MetaSchemas.Draft07">
            <summary>
            The meta-schema for draft-07.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.MetaSchemaValidationResults">
            <summary>
            Results object for schema meta-validations.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MetaSchemaValidationResults.SupportedVersions">
            <summary>
            Gets or sets the JSON Schema draft versions supported by this schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MetaSchemaValidationResults.MetaSchemaValidations">
            <summary>
            Gets a set of results produced by validating this schema against the draft meta-schemas.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MetaSchemaValidationResults.OtherErrors">
            <summary>
            Gets other errors that may have been found.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.MetaSchemaValidationResults.IsValid">
            <summary>
            Gets whether this schema is valid according to the drafts.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.MetaSchemaValidationResults.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.MetaSchemaValidationResults.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.PropertyDependency">
            <summary>
            Declares a dependency that is based on the presence of other properties in the JSON.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PropertyDependency.PropertyName">
            <summary>
            Gets or sets the property with the dependency.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.PropertyDependency.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.PropertyDependency"/> class.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="dependencies">A collection of properties on which <paramref name="propertyName"/> is dependent.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.#ctor(System.String,System.String,System.String[])">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.PropertyDependency"/> class.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="firstDependency">A minimal required property dependency.</param>
            <param name="otherDependencies">Additional property dependencies.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this dependency.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.Equals(Manatee.Json.Schema.PropertyDependency)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.Equals(Manatee.Json.Schema.IJsonSchemaDependency)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.PropertyDependency.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaDependency">
            <summary>
            Creates a dependency that is based on a secondary schema.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaDependency.PropertyName">
            <summary>
            Gets or sets the property with the dependency.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaDependency.SupportedVersions">
            <summary>
            Gets the versions (drafts) of JSON Schema which support this keyword.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.#ctor(System.String,Manatee.Json.Schema.JsonSchema)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.SchemaDependency"/> class.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="schema">The schema which must be validated.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.Validate(Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Provides the validation logic for this dependency.
            </summary>
            <param name="context">The context object.</param>
            <returns>Results object containing a final result and any errors that may have been found.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.RegisterSubschemas(System.Uri)">
            <summary>
            Used register any subschemas during validation.  Enables look-forward compatibility with <code>$ref</code> keywords.
            </summary>
            <param name="baseUri">The current base URI</param>
            <implementationNotes>
            If the dependency does not contain any schemas (e.g. <code>maximum</code>), this method is a no-op.
            </implementationNotes>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)">
            <summary>
            Resolves any subschemas during resolution of a <code>$ref</code> during validation.
            </summary>
            <param name="pointer">A <see cref="T:Manatee.Json.Pointer.JsonPointer"/> to the target schema.</param>
            <param name="baseUri">The current base URI.</param>
            <returns>The referenced schema, if it exists; otherwise null.</returns>
            <implementationNotes>
            If the dependency contains no subschemas, simply return null.
            If the dependency contains a subschema, simply pass the call to <see cref="M:Manatee.Json.Schema.JsonSchema.ResolveSubschema(Manatee.Json.Pointer.JsonPointer,System.Uri)"/>.
            </implementationNotes>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.Equals(Manatee.Json.Schema.SchemaDependency)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.Equals(Manatee.Json.Schema.IJsonSchemaDependency)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaDependency.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaErrorMessages">
            <summary>
            Defines tokenized error messages for schema validations.
            </summary>
            <remarks>
            Tokens are denoted using a set of double curly braces (e.g. <code>{{value}}</code>. All messages support a "value" token, which is the validated value.  Others are declared in the notes for each message.
            Properties which have no error message listed here simply forward error messages from children schemata.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Const">
            <summary>
            The error message used for the <code>const</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Contains">
            <summary>
            The error message used for the <code>contains</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Definitions">
            <summary>
            The error message used for the <code>definitions</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Enum">
            <summary>
            The error message used for the <code>enum</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Format">
            <summary>
            The error message used for the <code>format</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - format
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Then">
            <summary>
            The error message used for the <code>then</code> property (only used when the <code>if</code> property is present and succeeds).
            </summary>
            <remarks>
            Supports the following tokens:
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Else">
            <summary>
            The error message used for the <code>else</code> property (only used when the <code>if</code> property is present and fails).
            </summary>
            <remarks>
            Supports the following tokens:
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Items">
            <summary>
            The error message used for the <code>items</code> property.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.ExclusiveMaximum">
            <summary>
            The error message used for the <code>exclusiveMaximum</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Maximum">
            <summary>
            The error message used for the <code>maximum</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.ExclusiveMinimum">
            <summary>
            The error message used for the <code>exclusiveMinimum</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Minimum">
            <summary>
            The error message used for the <code>minimum</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MaxItems">
            <summary>
            The error message used for the <code>maxItems</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MinItems">
            <summary>
            The error message used for the <code>minItems</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MaxLength">
            <summary>
            The error message used for the <code>maxLength</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MinLength">
            <summary>
            The error message used for the <code>minLength</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MaxProperties">
            <summary>
            The error message used for the <code>maxProperties</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MinProperties">
            <summary>
            The error message used for the <code>minProperties</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.MultipleOf">
            <summary>
            The error message used for the <code>multipleOf</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - multipleOf
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Not">
            <summary>
            The error message used for the <code>not</code> property.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.OneOf">
            <summary>
            The error message used for the <code>oneOf</code> property.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Pattern">
            <summary>
            The error message used for the <code>pattern</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - pattern
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.AdditionalProperties_False">
            <summary>
            The error message used for the <code>additionalProperties</code> property when the property's value is false.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Required">
            <summary>
            The error message used for the <code>required</code> property.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.Type">
            <summary>
            The error message used for the <code>type</code> property.
            </summary>
            <remarks>
            Supports the following tokens:
            - expected
            - actual
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaErrorMessages.UniqueItems">
            <summary>
            The error message used for the <code>uniqueItems</code> property.
            </summary>
            <remarks>
            Supports no other tokens.
            </remarks>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaKeywordCatalog">
            <summary>
            Curates a list of all known JSON Schema keywords.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeywordCatalog.Add``1">
            <summary>
            Adds a new keyword.
            </summary>
            <typeparam name="T">The type of the keyword implementation.</typeparam>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaKeywordCatalog.Remove``1">
            <summary>
            Removes a keyword from use.
            </summary>
            <typeparam name="T">The type of the keyword implementation.</typeparam>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaLoadException">
            <summary>
            Thrown when a schema could not be loaded.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaLoadException.MetaValidation">
            <summary>
            The results generated by meta-schema validation.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaReferenceNotFoundException">
            <summary>
            Thrown when a schema reference cannot be resolved.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaReferenceNotFoundException.Location">
            <summary>
            The location of the reference relative to the original schema root.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaReferenceNotFoundException.#ctor(Manatee.Json.Pointer.JsonPointer)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.SchemaReferenceNotFoundException"/> class.
            </summary>
            <param name="location">The location of the reference relative to the original schema root.</param>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaValidationContext">
            <summary>
            Used to track data throughout the validation process.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationContext.Local">
            <summary>
            Gets or sets the local schema at this point in the validation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationContext.Root">
            <summary>
            Gets or sets the root schema when validation begins.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationContext.Instance">
            <summary>
            Gets or sets the instance being validated.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationContext.EvaluatedPropertyNames">
            <summary>
            Gets a list of property names that have been evaluated in this validation pass.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationContext.BaseUri">
            <summary>
            Gets or sets the base URI at this point in the validation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationContext.InstanceLocation">
            <summary>
            Gets or sets the current instance location.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationContext.RelativeLocation">
            <summary>
            Gets or sets the current schema keyword location relative to the original schema root.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationContext.BaseRelativeLocation">
            <summary>
            Gets or sets the current schema location relative to the current base URI (<see cref="P:Manatee.Json.Schema.SchemaValidationContext.BaseUri"/>).
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaValidationOutputFormat">
            <summary>
            Defines the different output verbosities supported.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.SchemaValidationOutputFormat.Basic">
            <summary>
            Denotes that only a true/false value will be returned.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.SchemaValidationOutputFormat.List">
            <summary>
            Denotes that the errors will be returned as a flat list.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.SchemaValidationOutputFormat.Hierarchy">
            <summary>
            Denotes that the errors will appear in a collapsed hierarchy.
            </summary>
        </member>
        <member name="F:Manatee.Json.Schema.SchemaValidationOutputFormat.VerboseHierarchy">
            <summary>
            Denotes that the errors will appear in a raw, uncollapsed hierarchy.
            </summary>
        </member>
        <member name="T:Manatee.Json.Schema.SchemaValidationResults">
            <summary>
            Contains the results of schema validation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.Null">
            <summary>
            Gets a value to return for no results.  Only used when a keyword should not produce any output, such as <code>$id</code>.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.IsValid">
            <summary>
            Gets or sets whether the validation was successful.  Defaults to true.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.RelativeLocation">
            <summary>
            Gets or sets the location of the keyword relative to the original schema root.  This will include any <code>$ref</code> segments.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.AbsoluteLocation">
            <summary>
            Gets or sets the absolute location of the keyword.  This is a direct reference after all <code>$ref</code> keywords have been resolved.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.InstanceLocation">
            <summary>
            Gets or sets the location within the instance.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.AnnotationValue">
            <summary>
            Gets or sets an annotation value.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.Keyword">
            <summary>
            Gets or sets the keyword.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.AdditionalInfo">
            <summary>
            Gets or sets any additional information regarding the validation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.SchemaValidationResults.NestedResults">
            <summary>
            Gets or sets any results of nested schemas.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationResults.#ctor(System.String,Manatee.Json.Schema.SchemaValidationContext)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Schema.SchemaValidationResults"/> class.
            </summary>
            <param name="keyword">The name of the keyword producing the result.</param>
            <param name="context">The current validation context when the result is produced.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationResults.Condense">
            <summary>
            Creates a condensed copy of the result.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationResults.Flatten">
            <summary>
            Creates a flattened copy of the result.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationResults.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationResults.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationResults.Equals(Manatee.Json.Schema.SchemaValidationResults)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationResults.Equals(System.Object)">
            <summary>Determines whether the specified object is equal to the current object.</summary>
            <returns>true if the specified object  is equal to the current object; otherwise, false.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Manatee.Json.Schema.SchemaValidationResults.GetHashCode">
            <summary>Serves as the default hash function. </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="T:Manatee.Json.Schema.StringFormat">
            <summary>
            Defines various string formatting types used for StringSchema validation.
            </summary>
            <remarks>
            Any of these may be overridden by creating a new instance with the same key.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.DateTime">
            <summary>
            Defines a date/time format.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.Email">
            <summary>
            Defines an email address format.
            </summary>
            <remarks>
            From http://www.regular-expressions.info/email.html
            </remarks>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.HostName">
            <summary>
            Defines a host name format.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.Ipv4">
            <summary>
            Defines an IPV4 address format.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.Ipv6">
            <summary>
            Defines an IPV6 format.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.Regex">
            <summary>
            Defines a regular expression format.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.Uri">
            <summary>
            Defines a URI format via <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)"/>.
            </summary>
            <remarks>For draft-06 schema, only use this for absolute URIs.</remarks>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.UriReference">
            <summary>
            Defines a URI format via <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)"/>
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.Key">
            <summary>
            A string key which specifies this string format.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.SupportedBy">
            <summary>
            Gets
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.ValidationRegex">
            <summary>
            If created with a regular expression, this gets the regular expression.
            </summary>
        </member>
        <member name="P:Manatee.Json.Schema.StringFormat.ValidationFunction">
            <summary>
            If created with a validation function, this gets the function.
            </summary>
        </member>
        <member name="M:Manatee.Json.Schema.StringFormat.#ctor(System.String,Manatee.Json.Schema.JsonSchemaVersion,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Schema.StringFormat"/> instance using a regular expression.
            </summary>
            <param name="key">The name of the format.  This is the value that will appear in the schema.</param>
            <param name="supportedBy">The schema drafts supported by this keyword.</param>
            <param name="regex">The validation regular expression.</param>
            <param name="isCaseSensitive">Whether the regular expression is to be processed as case-sensitive.</param>
        </member>
        <member name="M:Manatee.Json.Schema.StringFormat.#ctor(System.String,Manatee.Json.Schema.JsonSchemaVersion,System.Func{System.String,System.Boolean})">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Schema.StringFormat"/> instance using a validation function.
            </summary>
            <param name="key">The name of the format.  This is the value that will appear in the schema.</param>
            <param name="supportedBy">The schema drafts supported by this keyword.</param>
            <param name="validate">The function by which the string is validated.</param>
        </member>
        <member name="M:Manatee.Json.Schema.StringFormat.Validate(System.String)">
            <summary>
            Validates a value to the specified format.
            </summary>
            <param name="value">The value to validate.</param>
            <returns>True if the value is valid, otherwise false.</returns>
        </member>
        <member name="M:Manatee.Json.Schema.StringFormat.GetFormat(System.String)">
            <summary>
            Gets a <see cref="T:Manatee.Json.Schema.StringFormat"/> object based on a format key.
            </summary>
            <param name="formatKey">The predefined key for the format.</param>
            <returns>A <see cref="T:Manatee.Json.Schema.StringFormat"/> object, or null if none exists for the key.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.AbstractionMap">
            <summary>
            Provides an interface to map abstract and interface types to concrete types for object instantiation during deserialization.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.AbstractionMap.Default">
            <summary>
            Provides a default abstraction map for new <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instances.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.#ctor">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Serialization.AbstractionMap"/> instance.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.#ctor(Manatee.Json.Serialization.AbstractionMap)">
            <summary>
            Creates a new <see cref="T:Manatee.Json.Serialization.AbstractionMap"/> instance using another as a basis.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.Map``2(Manatee.Json.Serialization.MapBaseAbstractionBehavior)">
            <summary>
            Applies a mapping from an abstraction to a concrete type.
            </summary>
            <typeparam name="TAbstract">The abstract type.</typeparam>
            <typeparam name="TConcrete">The concrete type.</typeparam>
            <param name="mappingBehavior">The mapping behavior.</param>
            <exception cref="T:Manatee.Json.Serialization.JsonTypeMapException`2">Thrown if TConcrete is an abstract class or an interface.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.MapGeneric(System.Type,System.Type,Manatee.Json.Serialization.MapBaseAbstractionBehavior)">
            <summary>
            Applies a mapping from an open generic abstraction to an open generic concrete type.
            </summary>
            <param name="tAbstract">The abstract type.</param>
            <param name="tConcrete">The concrete type.</param>
            <param name="mappingBehavior">The mapping behavior.</param>
            <exception cref="T:Manatee.Json.Serialization.JsonTypeMapException">Thrown if <paramref name="tConcrete"/> is an abstract class or an interface or if <paramref name="tConcrete"/> does not inherit from <paramref name="tAbstract"/>.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.RemoveMap``1(System.Boolean)">
            <summary>
            Removes a previously-assigned mapping.
            </summary>
            <typeparam name="TAbstract">The type to remove.</typeparam>
            <param name="removeRelated">Optionally removes mappings of base and related interface types.</param>
        </member>
        <member name="M:Manatee.Json.Serialization.AbstractionMap.GetMap(System.Type)">
            <summary>
            Retrieves the map setting for an abstraction type.
            </summary>
            <param name="type">The abstraction type.</param>
            <returns>The mapped type if a mapping exists; otherwise the abstraction type.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.DateTimeSerializationFormat">
            <summary>
            Available formatting options for serializing DateTime objects.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.DateTimeSerializationFormat.Iso8601">
            <summary>
            Output conforms to ISO 8601 formatting: YYYY-MM-DDThh:mm:ss.sTZD (e.g. 1997-07-16T19:20:30.45+01:00)
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.DateTimeSerializationFormat.JavaConstructor">
            <summary>
            Output is a string in the format "/Date([ms])/", where [ms] is the number of milliseconds
            since January 1, 1970 UTC.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.DateTimeSerializationFormat.Milliseconds">
            <summary>
            Output is a numeric value representing the number of milliseconds since January 1, 1970 UTC.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.DateTimeSerializationFormat.Custom">
            <summary>
            Output is formatted using the <see cref="P:Manatee.Json.Serialization.JsonSerializerOptions.CustomDateTimeSerializationFormat"/> property.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.EnumSerializationFormat">
            <summary>
            Enumerates serialization formats for enumerations.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.EnumSerializationFormat.AsInteger">
            <summary>
            Instructs the serializer to convert enumeration values to their numeric counterparts.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.EnumSerializationFormat.AsName">
            <summary>
            Instructs the serializer to convert enumeration values to their string counterparts.
            </summary>
            <remarks>
            This option will use the <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/>'s <see cref="P:System.ComponentModel.DataAnnotations.DisplayAttribute.Description"/> property if it is present.  If the enumeration is marked with the flags attribute, the string representation will consist of a delimited list of names, the delimiter specified by <see cref="P:Manatee.Json.Serialization.JsonSerializerOptions.FlagsEnumSeparator"/>.  Whenever a value is passed which does not have a named counterpart, the numeric value will be used.
            </remarks>
        </member>
        <member name="T:Manatee.Json.Serialization.IJsonSerializable">
            <summary>
            Provides implementers the option to set a preferred method for serialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.IJsonSerializable.FromJson(Manatee.Json.JsonValue,Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Builds an object from a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="json">The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</param>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
        </member>
        <member name="M:Manatee.Json.Serialization.IJsonSerializable.ToJson(Manatee.Json.Serialization.JsonSerializer)">
            <summary>
            Converts an object to a <see cref="T:Manatee.Json.JsonValue"/>.
            </summary>
            <param name="serializer">The <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> instance to use for additional
            serialization of values.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the object.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.InvalidPropertyKeyBehavior">
            <summary>
            Enumeration of behavior options for the deserializer when a JSON structure is passed which
            contains invalid property keys.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.InvalidPropertyKeyBehavior.DoNothing">
            <summary>
            Deserializer ignores the invalid property keys.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.InvalidPropertyKeyBehavior.ThrowException">
            <summary>
            Deserializer will throw an exception when an invalid property key is found.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.IResolver">
            <summary>
            Defines methods required to resolved instances for deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.IResolver.Resolve``1">
            <summary>
            Resolves an instance of the given type.
            </summary>
            <typeparam name="T">The type to resolve.</typeparam>
            <returns>An instance of the type requested.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.IResolver.Resolve(System.Type)">
            <summary>
            Resolves an instance of the given type.
            </summary>
            <param name="type">The type to resolve.</param>
            <returns>An instance of the type requested.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.ISerializer">
            <summary>
            Defines a custom serializer.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.ISerializer.ShouldMaintainReferences">
            <summary>
            Determines if this serializer should maintain referential integrity.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.ISerializer.Handles(Manatee.Json.Serialization.SerializationContext)">
            <summary>
            Determines whether the serializer handles a specific type or JSON value given the current options.
            </summary>
            <param name="context"></param>
            <returns>true if the serializer is up to the task; false otherwise.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.ISerializer.Serialize(Manatee.Json.Serialization.SerializationContext)">
            <summary>
            Serializes a value.
            </summary>
            <param name="context"></param>
            <returns>A <see cref="T:Manatee.Json.JsonValue"/> that represents the value.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.ISerializer.Deserialize(Manatee.Json.Serialization.SerializationContext)">
            <summary>
            Deserializes a <see cref="T:Manatee.Json.JsonValue"/> into a value.
            </summary>
            <param name="context"></param>
            <returns>The typed value represented by the JSON data.</returns>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonIgnoreAttribute">
            <summary>
            Applied to properties to indicate that they are not to be serialized.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonMapToAttribute">
            <summary>
            Allows the user to specify how a property is mapped during serialization.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonMapToAttribute.MapToKey">
            <summary>
             Specifies the key in the JSON object which maps to the property to which
             this attribute is applied.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonMapToAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance fo the <see cref="T:Manatee.Json.Serialization.JsonMapToAttribute"/> class.
            </summary>
            <param name="key">The JSON object key.</param>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonSerializationException">
            <summary>
            Thrown when an error occurs during serialization or deserialization.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Serialization.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonSerializer">
            <summary>
            Serializes and deserializes objects and types to and from JSON structures.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializer.Options">
            <summary>
            Gets or sets a set of options for this serializer.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializer.AbstractionMap">
            <summary>
            Gets or sets the abstraction map used by this serializer.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.Serialize``1(``0)">
            <summary>
            Serializes an object to a JSON structure.
            </summary>
            <typeparam name="T">The type of the object to serialize.</typeparam>
            <param name="obj">The object to serialize.</param>
            <returns>The JSON representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.Serialize(System.Type,System.Object)">
            <summary>
            Serializes an object to a JSON structure.
            </summary>
            <param name="type">The type of the object to serialize.</param>
            <param name="obj">The object to serialize.</param>
            <returns>The JSON representation of the object.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.SerializeType``1">
            <summary>
            Serializes the public static properties of a type to a JSON structure.
            </summary>
            <typeparam name="T">The type to serialize.</typeparam>
            <returns>The JSON representation of the type.</returns>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.GenerateTemplate``1">
            <summary>
            Generates a template JSON inserting default values.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.Deserialize``1(Manatee.Json.JsonValue)">
            <summary>
            Deserializes a JSON structure to an object of the appropriate type.
            </summary>
            <typeparam name="T">The type of the object that the JSON structure represents.</typeparam>
            <param name="json">The JSON representation of the object.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:Manatee.Json.Serialization.TypeDoesNotContainPropertyException">Optionally thrown during automatic
            deserialization when the JSON contains a property which is not defined by the requested
            type.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.Deserialize(System.Type,Manatee.Json.JsonValue)">
            <summary>
            Deserializes a JSON structure to an object of the appropriate type.
            </summary>
            <param name="type">The type of the object that the JSON structure represents.</param>
            <param name="json">The JSON representation of the object.</param>
            <returns>The deserialized object.</returns>
            <exception cref="T:Manatee.Json.Serialization.TypeDoesNotContainPropertyException">Optionally thrown during automatic
            deserialization when the JSON contains a property which is not defined by the requested
            type.</exception>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializer.DeserializeType``1(Manatee.Json.JsonValue)">
            <summary>
            Deserializes a JSON structure to the public static properties of a type.
            </summary>
            <typeparam name="T">The type to deserialize.</typeparam>
            <param name="json">The JSON representation of the type.</param>
            <exception cref="T:Manatee.Json.Serialization.TypeDoesNotContainPropertyException">Optionally thrown during automatic
            deserialization when the JSON contains a property which is not defined by the requested
            type.</exception>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonSerializerOptions">
            <summary>
            Represents a set of behavior options for the <see cref="T:Manatee.Json.Serialization.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.JsonSerializerOptions.Default">
            <summary>
            Default options used by the serializer.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.EncodeDefaultValues">
            <summary>
            Gets and sets whether the serializer encodes default values for properties.
            </summary>
            <remarks>
            Setting to 'true' may significantly increase the size of the JSON structure.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.InvalidPropertyKeyBehavior">
            <summary>
            Gets and sets the behavior of the deserializer when a JSON structure is passed which
            contains invalid property keys.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.DateTimeSerializationFormat">
            <summary>
            Gets and sets the format for <see cref="T:System.DateTime"/> serialization using the default serializer methods.
            </summary>
            <remarks>
            If a custom serializer for DateTime has been registered, this property will have no effect.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.CustomDateTimeSerializationFormat">
            <summary>
            Gets and sets a custom serialization format for <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.EnumSerializationFormat">
            <summary>
            Gets and sets the format for enumeration serialization using the default serializer methods.
            </summary>
            <remarks>
            If a custom serializer for DateTime has been registered, this property will have no effect.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.FlagsEnumSeparator">
            <summary>
            Gets and sets a separator to be used when serializing enumerations marked with the <see cref="T:System.FlagsAttribute"/>.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.CaseSensitiveDeserialization">
            <summary>
            Gets and sets whether the serializer considers case for properties while deserializing.
            </summary>
            <remarks>
            This only affects automatic serialization.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.TypeNameSerializationBehavior">
            <summary>
            Gets and sets whether the serializer always includes the type name while serializing.
            </summary>
            <remarks>
            This only affects automatic serialization.
            </remarks>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.PropertySelectionStrategy">
            <summary>
            Gets and sets which properties are automatically included while serializing.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.Resolver">
            <summary>
            Gets and sets an <see cref="T:Manatee.Json.Serialization.IResolver"/> implementation for instantiating objects while deserializing.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.AutoSerializeFields">
            <summary>
            Gets and sets whether public fields should be serialized during autoserialization.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.SerializationNameTransform">
            <summary>
            Gets and sets a transformation function for property names during serialization.  Default is no transformation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.DeserializationNameTransform">
            <summary>
            Gets and sets a transformation function for property names during deserialization.  Default is no transformation.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.JsonSerializerOptions.OnlyExplicitProperties">
            <summary>
            Gets and sets whether the serializer will serialize only the properties defined by the
            type given as the generic parameter.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializerOptions.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Manatee.Json.Serialization.JsonSerializerOptions"/> with default options.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonSerializerOptions.#ctor(Manatee.Json.Serialization.JsonSerializerOptions)">
            <summary>
            Creates a new instance of <see cref="T:Manatee.Json.Serialization.JsonSerializerOptions"/> by copying an existing
            <see cref="T:Manatee.Json.Serialization.JsonSerializerOptions"/> instance.
            </summary>
            <param name="options">The <see cref="T:Manatee.Json.Serialization.JsonSerializerOptions"/> instance to copy.</param>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonTypeMapException">
            <summary>
             Thrown when an abstract or interface type is mapped to another abstract or interface type.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.JsonTypeMapException`2">
            <summary>
             Thrown when an abstract or interface type is mapped to another abstract or interface type.
            </summary>
            <typeparam name="TAbstract">The type being mapped from.</typeparam>
            <typeparam name="TConcrete">The type being mapped to.</typeparam>
        </member>
        <member name="M:Manatee.Json.Serialization.JsonTypeMapException`2.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Serialization.JsonTypeMapException`2"/> object.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.MapBaseAbstractionBehavior">
            <summary>
            Describes mapping behaviors for mapping abstraction types in the serializer.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.MapBaseAbstractionBehavior.None">
            <summary>
            Specifies that no additional mappings will be made.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.MapBaseAbstractionBehavior.Unmapped">
            <summary>
            Specifies that any unmapped base classes and interfaces will be mapped.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.MapBaseAbstractionBehavior.Override">
            <summary>
            Specifies that all base classes and interfaces will be mapped, overriding any existing mappings.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.PropertySelectionStrategy">
            <summary>
            Enumerates the types of properties which are automatically serialized.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.PropertySelectionStrategy.ReadWriteOnly">
            <summary>
            Indicates that read/write properties will be serialized.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.PropertySelectionStrategy.ReadOnly">
            <summary>
            Indicates that read-only properties will be serialized.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.PropertySelectionStrategy.ReadAndWrite">
            <summary>
            Indicates that both read-only and read/write properties will be serialized.
            </summary>
        </member>
        <member name="T:Manatee.Json.Serialization.SchemaAttribute">
            <summary>
            Indicates that a type should be validated by a JSON Schema before deserializing.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.SchemaAttribute.Source">
            <summary>
            The source of the schema.  May be an absolute URI or the name of a static property defined on the type.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.SchemaAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Serialization.SchemaAttribute"/>.
            </summary>
            <param name="source">The source of the schema.</param>
        </member>
        <member name="T:Manatee.Json.Serialization.SerializationContext">
            <summary>
            Encapsulates all data required to serialize and deserialize object to and from JSON.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.SerializationContext.InferredType">
            <summary>
            The inferred type.  This will usually be the actual type of the object during serialization
            or the <see cref="P:Manatee.Json.Serialization.SerializationContext.RequestedType"/> during deserialization.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.SerializationContext.RequestedType">
            <summary>
            The type requested by the serialize/deserialize call.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.SerializationContext.CurrentLocation">
            <summary>
            The current location in the JSON instance or object.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.SerializationContext.LocalValue">
            <summary>
            The current value in the JSON instance for deserialization.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.SerializationContext.Source">
            <summary>
            The current value in the object for serialization.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.SerializationContext.JsonRoot">
            <summary>
            The root of the JSON instance.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.SerializationContext.RootSerializer">
            <summary>
            The original serializer called by the client.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.SerializationContext.#ctor(Manatee.Json.Serialization.SerializationContext)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Serialization.SerializationContext"/> class.
            </summary>
            <param name="other"></param>
        </member>
        <member name="T:Manatee.Json.Serialization.SerializerFactory">
            <summary>
            Provides access to custom serializers.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.SerializerFactory.AddSerializer(Manatee.Json.Serialization.ISerializer)">
            <summary>
            Adds a new custom serializer.
            </summary>
            <param name="serializer">The serializer to add.</param>
        </member>
        <member name="M:Manatee.Json.Serialization.SerializerFactory.RemoveSerializer``1">
            <summary>
            Removes a custom serializer.
            </summary>
            <typeparam name="T">The concrete type of serializer to remove.</typeparam>
        </member>
        <member name="T:Manatee.Json.Serialization.TypeDoesNotContainPropertyException">
            <summary>
            Optionally thrown when deserializing and the JSON structure contains property names
            which are not valid for the type requested.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.TypeDoesNotContainPropertyException.Type">
            <summary>
            Gets the type.
            </summary>
        </member>
        <member name="P:Manatee.Json.Serialization.TypeDoesNotContainPropertyException.Json">
            <summary>
            Gets the portion of the JSON structure which contain the invalid properties.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.TypeDoesNotContainPropertyException.#ctor(System.Type,Manatee.Json.JsonValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Manatee.Json.Serialization.TypeDoesNotContainPropertyException"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="json">The invalid JSON structure.</param>
        </member>
        <member name="T:Manatee.Json.Serialization.TypeInstantiationException">
            <summary>
            Thrown when a type cannot be instantiated.
            </summary>
        </member>
        <member name="M:Manatee.Json.Serialization.TypeInstantiationException.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Serialization.TypeInstantiationException"/> class.
            </summary>
            <param name="type">The type which could not be instantiated.</param>
        </member>
        <member name="M:Manatee.Json.Serialization.TypeInstantiationException.#ctor(System.Type,System.Exception)">
            <summary>
            Creates a new instance of the <see cref="T:Manatee.Json.Serialization.TypeInstantiationException"/> class.
            </summary>
            <param name="type">The type which could not be instantiated.</param>
            <param name="innerException">An exception which caused this to be thrown.</param>
        </member>
        <member name="T:Manatee.Json.Serialization.TypeNameSerializationBehavior">
            <summary>
            Enumerates serialization behaviors for saving type names.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.TypeNameSerializationBehavior.Auto">
            <summary>
            Serializes the type name as necessary.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.TypeNameSerializationBehavior.OnlyForAbstractions">
            <summary>
            Serializes the type name only for abstract and interface types.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.TypeNameSerializationBehavior.Always">
            <summary>
            Always serializes the type name.
            </summary>
        </member>
        <member name="F:Manatee.Json.Serialization.TypeNameSerializationBehavior.Never">
            <summary>
            Never serializes the type name.
            </summary>
        </member>
        <member name="T:Manatee.Json.Transform.JsonTransformer">
            <summary>
            Performs transformations between JSON schemas.
            </summary>
        </member>
        <member name="M:Manatee.Json.Transform.JsonTransformer.Transform(Manatee.Json.JsonValue,Manatee.Json.JsonValue)">
            <summary>
            Performs transformations between JSON schemas.
            </summary>
            <param name="source">The source JSON.</param>
            <param name="template">A template defining the transformation.</param>
            <returns>The transformed JSON.</returns>
        </member>
        <member name="M:Manatee.Json.UriExtensions.GetParentUri(System.Uri)">
            <summary>
            Gets the Uri to the parent object.
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> of a resource, for which the parent Uri should be retrieved.</param>
            <returns>
            The parent <see cref="T:System.Uri" />.
            </returns>
            <exception cref="T:System.ArgumentNullException">uri</exception>
            <exception cref="T:System.InvalidOperationException">Cannot get parent of root</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri" /> is <c>null</c>.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="uri" /> has no parent, it refers to a root resource.</exception>
        </member>
        <member name="T:Manatee.Json.XmlExtensions">
            <summary>
            Contains functionality to map JSON values to XML constructs.
            </summary>
        </member>
        <member name="M:Manatee.Json.XmlExtensions.ToXElement(Manatee.Json.JsonValue,System.String)">
            <summary>
            Converts a <see cref="T:Manatee.Json.JsonValue"/> to an XElement
            </summary>
            <param name="json">A <see cref="T:Manatee.Json.JsonValue"/>.</param>
            <param name="key">The key to be used as a top-level element name.</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/> representation of the <see cref="T:Manatee.Json.JsonValue"/>.</returns>
            <remarks>
            The 'key' parameter may be null only when the underlying JSON is an object which contains a single key/value pair.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="key"/> is null, empty, or whitespace and <paramref name="json"/> is not a non-empty <see cref="T:Manatee.Json.JsonObject"/>.</exception>
        </member>
        <member name="M:Manatee.Json.XmlExtensions.ToJson(System.Xml.Linq.XElement)">
            <summary>
            Converts an <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="xElement">An <see cref="T:System.Xml.Linq.XElement"/>.</param>
            <returns>The <see cref="T:Manatee.Json.JsonValue"/> representation of the <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:Manatee.Json.XmlExtensions.ToJson(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Converts an <see cref="T:System.Xml.Linq.XElement"/> to a <see cref="T:Manatee.Json.JsonObject"/>.
            </summary>
            <param name="xElements">A collection of <see cref="T:System.Xml.Linq.XElement"/> objects.</param>
            <returns>A single <see cref="T:Manatee.Json.JsonValue"/> which represents the list of <see cref="T:System.Xml.Linq.XElement"/> objects.</returns>
            <exception cref="T:System.Xml.XmlException">Thrown if an error occurs while attempting to convert an array of elements.</exception>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="P:JetBrains.Annotations.StringFormatMethodAttribute.FormatParameterName">
            <summary>
            
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
    </members>
</doc>
